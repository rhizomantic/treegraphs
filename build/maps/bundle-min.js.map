{"version":3,"sources":["main.js","classes.js","generate.js","spread.js","render.js"],"names":["seed","density","capturer","render","canvas","editor","area","tickers","Set","t","go","capture","captureTime","tweenable","backCol","graphs","def0","props","renderConfig","type","levels","net","num","pos","ang","step","ease","pow","terms","min","max","dur","turn","children","def","stroke","fill","weightMult","weightAdd","mirror","size","weight","dif","var","setup","createCanvas","parent","background","frameRate","strokeWeight","noFill","smooth","select","mouseClicked","reset","hide","console","log","fromEditor","_def","JSON","parse","value","generateSimple","int","random","randomSeed","noiseSeed","k","Graph","push","stringify","replacer","CCapture","format","framerate","name","verbose","display","RenderCurves","key","val","Math","floor","draw","g","root","update","moveNode","start","document","getElementById","stop","save","makeGroup","gix","dad","graph","group","i","n","Node","ix","nrm","depth","count","anchor","rot","show","init","j","length","groups","mousePressed","keyTyped","activeElement","gt","getTime","saveCanvas","generate","style","contrast","f","constrain","now","Date","getFullYear","toString","substring","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","[object Object]","args","this","rnd","windowWidth","windowHeight","curves","tw","isNaN","parseCurve","c","out","bounce","noiseRad","noiseZ","readTerm","base","time","ts","split","ps","parseFloat","term","o","p","prop","Object","entries","x","ti","noise","cos","TWO_PI","sin","abs","PI","pick","opts","generateWithBudget","total","angles","dn","budget","neo","a1","width","height","_mirror","drawNode","line","ellipse","kids","df","lv","hasOwnProperty","close","sizeAdd","sizeMult","renderNode","level","noStroke","bezier","beginShape","a","vertex","nxt","bezierVertex","endShape","CLOSE","sz","wg","nd","hlf","anc","prv","pts","siblings","cou","cs","sn","text"],"mappings":"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","sourcesContent":["var tickers = new Set();\r\nvar t = 0;\r\nvar seed;\r\nvar density;\r\nvar go = true;\r\nvar capture = false;\r\nvar captureTime = 0;\r\nvar capturer;\r\nvar render;\r\nvar canvas, editor, area;\r\nvar tweenable = [\"step\", \"turn\", \"size\", \"weight\"];\r\nvar backCol = \"#FFFFFF\";\r\n\r\n// pi/2 = 1.5707\r\n// pi/3 = 1.047\r\n// pi/4 = 0.7853\r\nvar graphs = [];\r\n\r\nvar def0 = {\r\n    \"props\": {\r\n        \"render\": \"curves\",\r\n        \"renderConfig\": { \"type\": \"petals\", \"levels\": [['#FFCC0088', 8], ['rgba(255, 0, 0, 0.1)', 4]] }\r\n    },\r\n    \"net\": {\r\n        \"type\": \"fan\", \"num\": 35, \"pos\": [ 500, 400 ], \"ang\": 0, \"step\": {\"ease\":\"sine\", \"pow\": -3, \"terms\": \"noise*0.8+t*0.2\", \"min\": 30, \"max\": 480, \"dur\": 200}, \"turn\": 6.28/35, \"children\": [\r\n            //{ \"type\": \"chain\", \"num\": 3,  \"step\": 40, \"turn\": 0.5 }\r\n        ]\r\n    }\r\n};\r\n\r\nvar def = {\r\n  \"props\": {\r\n    \"render\": {\r\n      \"levels\": [\r\n        {\r\n          \"type\": \"tree\",\r\n          \"stroke\": \"#00000088\",\r\n          \"fill\": \"#00000033\",\r\n          \"weightMult\": 0,\r\n          \"weightAdd\": 1\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  \"net\": [\r\n    {\r\n      \"num\": 4,\r\n      \"type\": \"fan\",\r\n      \"mirror\": true,\r\n      \"size\": 72,\r\n      \"weight\": 1,\r\n      \"step\": 300,\r\n      \"turn\": {\r\n        \"min\": 0,\r\n        \"dif\": 3.14,\r\n        \"terms\": \"ix\"\r\n      },\r\n      \"children\": [\r\n        {\r\n          \"num\": 12,\r\n          \"type\": \"fan\",\r\n          \"mirror\": true,\r\n          \"size\": 36,\r\n          \"weight\": 1,\r\n          \"step\": {\r\n            \"min\": 30,\r\n            \"dif\": 150,\r\n            \"terms\": \"tix\",\r\n            \"ease\": \"none\",\r\n            \"pow\": 3,\r\n            \"dur\": 200\r\n          },\r\n          \"turn\": {\r\n            \"min\": 0,\r\n            \"dif\": 3.14,\r\n            \"var\": 1.04,\r\n            \"terms\": \"ix\",\r\n            \"pow\": 2,\r\n            \"dur\": 200\r\n          },\r\n          \"children\": [\r\n            /*{\r\n              \"num\": 24,\r\n              \"type\": \"fan\",\r\n              \"mirror\": true,\r\n              \"size\": 6,\r\n              \"weight\": 1,\r\n              \"step\": {\r\n                \"min\": 100,\r\n                \"dif\": 200,\r\n                \"terms\": \"t*0.5+ix*0.5\",\r\n                \"ease\": \"hill\",\r\n                \"pow\": 3,\r\n                \"dur\": 200\r\n              },\r\n              \"turn\": {\r\n                \"min\": 0,\r\n                \"dif\": 4.85,\r\n                \"terms\": \"ix\"\r\n              },\r\n              \"children\": []\r\n          }*/\r\n          ]\r\n        }\r\n      ],\r\n      \"pos\": [\r\n        702.5,\r\n        479\r\n      ]\r\n    }\r\n  ]\r\n};\r\n\r\n\r\n\r\nfunction setup() {\r\n    canvas = createCanvas(1080, 1080);//(windowWidth, windowHeight);\r\n    canvas.parent('container');\r\n    background(backCol);\r\n    frameRate(30);\r\n    stroke(0, 128);\r\n    strokeWeight(3);\r\n    //fill(0, 32);\r\n    noFill();\r\n    smooth();\r\n\r\n\r\n\r\n    editor = select(\"#editor\");\r\n    area = select(\"#editor-area\");\r\n    let update = select(\"#update\");\r\n    update.mouseClicked( function(){ reset(true) } );\r\n    let generate = select(\"#generate\");\r\n    generate.mouseClicked( function(){ reset(false) } );\r\n\r\n    editor.hide();\r\n\r\n    reset( false );\r\n\r\n    console.log(\"setup\");\r\n}\r\n\r\nfunction reset(fromEditor) {\r\n  //let area = select(\"#editor-area\");\r\n  let _def;\r\n  if(fromEditor) {\r\n      _def = JSON.parse(area.value());\r\n  } else {\r\n      _def = generateSimple();\r\n  }\r\n  //tickers.clear();\r\n  background(backCol);\r\n  t = 0;\r\n  seed = int(random(999999));\r\n  randomSeed(seed);\r\n  noiseSeed(seed);\r\n\r\n  graphs = [];\r\n  //let _def = generate();\r\n  var k = new Graph( _def );\r\n  graphs.push(k);\r\n\r\n  area.value( JSON.stringify(_def, replacer, 2) );\r\n\r\n  if('capture' in _def.props && _def.props.capture) {\r\n      captureTime = _def.props.captureTime || 0;\r\n      capture = true;\r\n      capturer = new CCapture( {\r\n          format: 'webm',\r\n          framerate:30,\r\n          name:\"vid\",\r\n          verbose: true,\r\n          display: true\r\n       } );\r\n      //capturer.start();\r\n  }\r\n\r\n  render = new RenderCurves(_def);\r\n\r\n}\r\n\r\nfunction replacer(key, val) {\r\n    if(typeof(val) == \"number\") return Math.floor(val*100)/100;\r\n    return val;\r\n}\r\n\r\n\r\n\r\nfunction draw() {\r\n  if(go) {\r\n      background(backCol);\r\n      for(let g of graphs) {\r\n          g.root.update();\r\n          moveNode(g.root);\r\n          render.render(g.root);\r\n      }\r\n\r\n      if(capture) {\r\n          if(t == 0) capturer.start();\r\n\r\n          capturer.capture(document.getElementById('defaultCanvas0'));\r\n\r\n          if(t == captureTime) {\r\n              capture = false;\r\n              capturer.stop();\r\n              capturer.save();\r\n              capturer = null;\r\n          }\r\n      }\r\n\r\n      t++;\r\n      //console.log(capture, t);\r\n      //if(t == 200) reset();\r\n  }\r\n}\r\n\r\nfunction makeGroup(gix, g, dad, graph) {\r\n    //console.log(\"makeGroup\", g);\r\n    let group = [];\r\n    for(let i=0; i<g.num; i++) {\r\n        let n = new Node();\r\n        group.push(n);\r\n        n.ix = i;\r\n        n.gix = gix;\r\n        n.nrm = g.num == 1 ? 0 : (1 / (g.num)) * i;\r\n        n.parent = dad;\r\n        //n.parent.kids.push(n);\r\n        n.depth = dad.depth+1;\r\n        n.graph = graph;\r\n\r\n        graph.count ++;\r\n        graph.depth = Math.max(graph.depth, n.depth);\r\n        //console.log(n);\r\n\r\n        if(g.type == \"chain\" && i > 0) {\r\n            n.anchor = group[i-1];// dad.kids[i-1];\r\n        } else {\r\n            n.anchor = dad;\r\n        }\r\n\r\n        //n.turn = isNaN(g.turn) ? parseCurve(g.turn, n) : g.turn;// n.parent.turn + g.turn * n.ix;\r\n        //n.step = isNaN(g.step) ? parseCurve(g.step, n) : g.step;\r\n        n.type = g.type;\r\n        n.rot = 0;\r\n        n.turn = g.turn;\r\n        n.step = g.step;\r\n        n.mirror = g.mirror;\r\n        n.size = g.size;\r\n        n.weight = g.weight;\r\n        n.fill = g.fill;\r\n        n.stroke = g.stroke;\r\n        n.show = 'show' in g ? g.show : true;\r\n\r\n        n.init();\r\n\r\n        if(g.children) {\r\n            for(let j=0; j<g.children.length; j++) {\r\n                makeGroup(j, g.children[j], n, graph);\r\n            }\r\n        }\r\n    }\r\n\r\n    dad.groups.push(group);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction mousePressed() {\r\n  //pen.set(mouseX, mouseY);\r\n}\r\n\r\nfunction keyTyped() {\r\n    if (document.activeElement === document.getElementById('editor-area')) return;\r\n\r\n    if (key === ' ') {\r\n        go = !go;\r\n        console.log(\"go\", go);\r\n    } else if (key === 'r') {\r\n        reset(false);\r\n    } else if (key === 's') {\r\n        let gt = getTime();\r\n        saveCanvas(\"TG-\" + gt + \".jpg\");\r\n        //saveJSON(defs, \"TG-\" + gt + \".jpg\", false);\r\n    } else if (key === 'g') {\r\n        generate();\r\n    } else if (key === 'e') {\r\n        if (editor.style(\"display\") == \"block\") editor.hide();\r\n        else editor.show();\r\n    }\r\n    // uncomment to prevent any default behavior\r\n    //return false;\r\n}\r\n\r\nfunction contrast(n, f) {\r\n  return constrain(f*(n-0.5) + 0.5, 0, 1);\r\n}\r\n\r\nfunction getTime() {\r\n  let now = new Date();\r\n  return now.getFullYear().toString().substring(2,4) +\r\n        (now.getMonth() + 1).toString().padStart(2, \"0\") +\r\n        (now.getDate()).toString().padStart(2, \"0\") + \"-\" +\r\n        (now.getHours()).toString().padStart(2, \"0\") +\r\n        (now.getMinutes()).toString().padStart(2, \"0\") +\r\n        (now.getSeconds()).toString().padStart(2, \"0\");\r\n}\r\n\r\n/*function windowResized() {\r\n  resizeCanvas(windowWidth, windowHeight);\r\n  canvas.parent('container');\r\n  background(\"#FFFFFF\");\r\n}*/\r\n","/***** GRAPH *****/\r\nclass Graph {\r\n  constructor(args = {}) {\r\n    this.ix = graphs.length;\r\n    this.count = 0;\r\n    this.depth = 0;\r\n\r\n    this.root = new Node( {pos: args.net[0].pos} );\r\n    for(let i=0; i<args.net.length; i++){\r\n        makeGroup(i, args.net[i], this.root, this);\r\n    }\r\n    this.root.init();\r\n\r\n    console.log(\"graph\", this);\r\n  }\r\n}\r\n\r\n/***** NODE *****/\r\nclass Node {\r\n    constructor(args = {}) {\r\n        //properties\r\n        this.ix = args.ix || 0;\r\n        this.gix = args.gix || 0;\r\n        this.nrm = args.nrm || 0;\r\n        this.rnd = args.rnd || Math.random();\r\n        this.pos = args.pos || [windowWidth / 2, windowHeight / 2];\r\n        this.step = args.step || 30;\r\n        this.turn = args.turn || 0;\r\n        this.rot = args.rot || 0;\r\n        this.mirror = args.mirror || false;\r\n        this.size = args.size || 20;\r\n        this.weight = args.weight || 1;\r\n        this.depth = args.depth || 0;\r\n        this.fill = args.fill || \"#888888\";\r\n        this.stroke = args.stroke || 0;\r\n        this.show = 'show' in args ? args.show : true;\r\n\r\n        // Node references\r\n        this.graph = args.graph || null;\r\n        this.parent = args.parent || null;\r\n        this.anchor = args.anchor || null;\r\n        //this.kids = args.kids || [];\r\n        this.groups = args.groups || [];\r\n\r\n        this.curves = {};\r\n\r\n    }\r\n\r\n    init() {\r\n        for (let tw of tweenable) {\r\n            if (isNaN(this[tw])) {\r\n                this.curves[tw] = this.parseCurve(this[tw]);\r\n            }\r\n        }\r\n\r\n\r\n        for(let g of this.groups) {\r\n            for(let k of g) {\r\n                k.init();\r\n            }\r\n        }\r\n    }\r\n\r\n    parseCurve(c) {\r\n        c.terms = c.terms || \"ix\";\r\n\r\n        let out = {};\r\n        out.ease = c.ease || \"none\";\r\n        out.pow = c.pow || 2;\r\n        out.min = c.min || 0;\r\n        //out.max = c.max || 1;\r\n        out.dif = c.dif || 0;\r\n        //out.var = c.var || c.dif / n.parent.kids.length;\r\n        out.dur = c.dur || 0;\r\n        out.bounce = 'bounce' in c ? c.bounce : true;\r\n\r\n        if(out.ease == \"noise\") {\r\n            out.noiseRad = c.noiseRad || 6;\r\n            out.noiseZ = 'noiseZ' in c ? this.readTerm(c.noiseZ) : 1;\r\n        }\r\n\r\n        out.base = 0;\r\n        out.time = 0;\r\n\r\n        let ts = c.terms.split('+')\r\n        for(let t of ts) {\r\n            let ps = t.split('*');\r\n            if(ps[0] == 't' || ps[0] == 'time') {\r\n                out.time = ps.length > 1 ? parseFloat(ps[1]) : 1;\r\n            } else if(ps[0] == 'tix') {\r\n                out.time = ps.length > 1 ? this.nrm * parseFloat(ps[1]) : this.nrm;\r\n            } else {\r\n                /*let trm = 1;\r\n                for(let p of ps) {\r\n                    trm *= this.readTerm(p);\r\n                }\r\n                out.base += trm;*/\r\n                out.base += this.readTerm(t);\r\n            }\r\n        }\r\n        //console.log(\"curve\", n.graph.depth, n.depth, (n.graph.depth == 1 ? 0 : 1/n.graph.depth * n.depth) );\r\n\r\n        return out;\r\n    }\r\n\r\n    readTerm(term) {\r\n        if(! isNaN(term)) return term;\r\n\r\n        let ps = term.split('*');\r\n        let o = 1;\r\n        for(let p of ps) {\r\n            if(p == \"ix\") o *= this.nrm;\r\n            else if(p == \"rnd\") o *= this.rnd;\r\n            else if(p == \"dix\") o *= this.parent.nrm;\r\n            else if(p == \"drnd\") o *= this.parent.rnd;\r\n            else if(p == \"depth\") o *= this.depth;\r\n            else if(p == \"idepth\") o *= this.graph.depth - this.depth;\r\n            else if(p == \"depth-nrm\") o *= 1/this.graph.depth * this.depth;\r\n            else if(p == \"idepth-nrm\") o *= 1 - 1/this.graph.depth * this.depth;\r\n            else o *= parseFloat(p);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    update() {\r\n        for(let [prop, val] of Object.entries(this.curves)) {\r\n            let x = val.base;\r\n            //if(val.dur > 0) x += (1 / val.dur) * (t % (val.dur+1)) * val.time;\r\n            if(val.dur > 0 && val.time > 0) {\r\n                let ti;\r\n                if(val.bounce) ti = floor(t / (val.dur+1)) % 2 == 0 ? t % (val.dur+1) : (val.dur+1) - (t % (val.dur+1));\r\n                else ti = t % (val.dur+1);\r\n                x += (1 / val.dur) * ti * val.time;\r\n                //if(ti == 20) console.log(val.bounce);\r\n            }\r\n            if(x > 1) x %= 1;\r\n            //if(x > 1) x = floor(x%2) == 0 ? x%1 : 1 - (x%1);\r\n\r\n            if(val.ease == \"noise\") {\r\n                this[prop] = val.min + noise(8 + val.noiseRad*cos(TWO_PI*x), 8 + val.noiseRad*sin(TWO_PI*x), val.noiseZ ) * val.dif;\r\n                //this[prop] = val.min + noise(x*val.noiseRad, val.noiseZ ) * val.dif;\r\n                if(this.ix == 12 && this.parent.ix == 12) console.log(t, x, \"h\" );\r\n            } else {\r\n                this[prop] = val.min + ease(val.ease, x, val.pow) * val.dif;\r\n            }\r\n\r\n            //this[prop] = val.min + ease(val.ease, x, val.pow) * val.var * this.ix;\r\n        }\r\n\r\n        for(let g of this.groups) {\r\n            for(let k of g) {\r\n                k.update();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction ease(type, x, p) {\r\n    if(type == \"simple\") {\r\n        return p < 0 ? 1 - Math.pow(1-x, Math.abs(p)) : Math.pow(x, Math.abs(p));\r\n    } else if (type == \"IO\") {\r\n        //if(t < 0.5) return easeSimple(t*2, p) * 0.5;\r\n        //else return (1 - easeSimple(1-(t-0.5)*2, p)) * 0.5 + 0.5;\r\n        if(x < 0.5) return (p < 0 ? 1 - Math.pow(1-x*2, Math.abs(p)) : Math.pow(x*2, Math.abs(p))) * 0.5;\r\n        else return (1 - (p < 0 ? 1 - Math.pow(1-(1-(x-0.5)*2), Math.abs(p)) : Math.pow(1-(x-0.5)*2, Math.abs(p)))) * 0.5 + 0.5;\r\n    } else if (type == \"hill\") {\r\n        x = x < 0.5 ? x * 2 : 1 - (x-0.5)*2;\r\n        return p < 0 ? 1 - Math.pow(1-x, Math.abs(p)) : Math.pow(x, Math.abs(p));\r\n    } else if (type == \"sine\") {\r\n        return Math.sin(x*p*Math.PI*2) * 0.5 + 0.5;\r\n    } else {\r\n        return x;\r\n    }\r\n\r\n}\r\n\r\nfunction pick(...opts) {\r\n    return opts[floor(random(opts.length))];\r\n}\r\n","function generateWithBudget() {\r\n    let budget = 200;\r\n    let total = 0;\r\n    let angles = [PI/2, PI, PI*2];\r\n    let def = {\r\n        props:{\r\n            render: { levels: [\r\n                {type:\"tree\", stroke: '#999999', weightMult:0, weightAdd:1 },\r\n                {type:\"bezier\", stroke: '#00000088', weightAdd:4 },\r\n                {type:\"bezier\", stroke:'#FFFFFF88', weight:0} ]\r\n            }\r\n            //\"renderConfig\": { \"type\": \"tree\", \"levels\": [[0, 8], ['#FFFFFF', 4]] }\r\n        },\r\n        net:[]\r\n    };\r\n    let dad = def.net;\r\n    let dn = 1;\r\n\r\n    while(total < budget*0.8) {\r\n        let num = Math.floor( Math.pow(Math.random(), 2) * 10 ) + 2;\r\n        while(total + dn*num > budget && num > 1) {\r\n            num --;\r\n            //console.log(num, dn, total);\r\n        }\r\n        let neo = {\r\n            num: num,\r\n            type: Math.random() < 0.6 ? \"fan\" : \"chain\",\r\n            step: { min:Math.random() * 120 + 30, dif:0 },\r\n            turn: { min:PI/2, dif:angles[Math.floor(random(angles.length))] },\r\n            mirror: num % 2 == 0,\r\n            weight: { min:2, dif:2, terms:\"depth\" },\r\n            size: { min:10, dif:40, terms:\"depth\" },\r\n            children:[]\r\n        };\r\n        dad.push(neo);\r\n        total += dn * num;\r\n\r\n        if(Math.random() < 0.7) {\r\n            //console.log(\"child\", num, dn, total);\r\n            dad = neo.children;\r\n            dn *= num;\r\n\r\n        } else {\r\n            //console.log(\"sibling\", num, dn, total);\r\n        }\r\n    }\r\n\r\n    def.net[0].pos = [windowWidth/2, windowHeight/2];\r\n\r\n    //console.log(total, def);\r\n    return def;\r\n}\r\n\r\nfunction generateSimple() {\r\n    let a1 = random(0.1, PI/2);//PI/2;\r\n    let baseNum = int(random(2,6));\r\n    let def = {\r\n    props:{\r\n        capture: false,\r\n        captureTime: 300,\r\n        render: { levels: [\r\n            //{type:\"cousins\", close:true, stroke: '#FFCC0099', fill: '#33333388', weightMult:0, weightAdd:1 },\r\n            {type:\"tree\", stroke: '#000000BB', fill: '#00000000'}\r\n        ] }\r\n    },\r\n    net:[\r\n            {\r\n                num: 90,\r\n                type:\"fan\",\r\n                mirror:true,\r\n                size: 600,\r\n                weight: 1,\r\n                step: 10,\r\n                //turn:{ min:PI/2+a1, dif:-a1*4, terms:\"ix\" },\r\n                turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                show: true,\r\n                children:[\r\n                    {\r\n                        num:30,\r\n                        type:\"chain\",\r\n                        size: 36,\r\n                        weight: 2,\r\n                        step: 20,\r\n                        turn: { min:0, dif:TWO_PI, terms:\"t+ix\", ease:\"noise\", pow:2, dur:300, noiseRad:1, noiseZ:1 },\r\n                        show: true,\r\n                        //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                        children:[\r\n                            /*{\r\n                                num:int(24/baseNum),\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 26,\r\n                                weight: 4,\r\n                                step:{ min:60, dif:180, terms:\"t\", ease:\"noise\", pow:random(-4, 4), dur:2000, noiseRad:1, noiseZ:\"dix\"},\r\n                                turn:{ min:0, dif:pick(1.78, 3.14, 6.28, 8), terms:\"ix\" },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            },\r\n                            {\r\n                                num:int(18/baseNum),\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 16,\r\n                                weight: 4,\r\n                                step:{ min:60, dif:0, terms:\"ix*\"+pick(1,2,3,4), ease:\"hill\", pow:random(-4, 4)},\r\n                                turn:{ min:0, dif:pick(1.78, 3.14, 6.28, 8), terms:\"ix\" },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            }*/\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n\r\n    console.log(\"GEN\", a1, PI/2+a1, -a1*4 );\r\n\r\n    def.net[0].pos = [width/2, height/2];\r\n    console.log(width, height);\r\n    return def;\r\n\r\n}\r\n","function moveNode(n) {\r\n    if(n.anchor !== null) {\r\n        //let trn = n.parent.rot + n.turn;\r\n\r\n        let _mirror = (n.parent.anchor != null && n.parent.mirror && n.parent.anchor.ix%2 == 0) ^ ( n.mirror && n.parent.ix%2 == 0);\r\n\r\n        n.rot = _mirror? n.parent.rot - n.turn : n.parent.rot + n.turn;\r\n\r\n        n.pos = [\r\n            n.anchor.pos[0] + n.step * cos(n.rot),\r\n            n.anchor.pos[1] + n.step * sin(n.rot)\r\n        ]\r\n\r\n        //if(t == 5) console.log(n.depth, n.ix, n.step, n.rot);\r\n    }\r\n\r\n    /*for(let k of n.kids) {\r\n        moveNode(k);\r\n    }*/\r\n    for(let g of n.groups) {\r\n        for(let k of g) {\r\n            moveNode(k);\r\n        }\r\n    }\r\n}\r\n","\r\nfunction drawNode(n) {\r\n    if(n.anchor != null) line(n.anchor.pos[0], n.anchor.pos[1], n.pos[0], n.pos[1]);\r\n    ellipse(n.pos[0], n.pos[1], 10, 10);\r\n\r\n    for(let k of n.kids) {\r\n        drawNode(k);\r\n    }\r\n}\r\n\r\nclass RenderCurves {\r\n    constructor(df = {}) {\r\n        let args = df.props.render || {};\r\n\r\n        this.type= args.type || \"tree\";\r\n        this.levels = args.levels || [{stroke:0, weight:1}];\r\n        for(let lv of this.levels) {\r\n            if(! lv.hasOwnProperty(\"type\")) lv.type = this.type;\r\n            if(! lv.hasOwnProperty(\"close\")) lv.close = false;\r\n            if(! lv.hasOwnProperty(\"stroke\")) lv.stroke = 0;\r\n            if(! lv.hasOwnProperty(\"fill\")) lv.fill = \"#888888\";\r\n            if(! lv.hasOwnProperty(\"weightAdd\")) lv.weightAdd = 0;\r\n            if(! lv.hasOwnProperty(\"weightMult\")) lv.weightMult = 1;\r\n            if(! lv.hasOwnProperty(\"sizeAdd\")) lv.sizeAdd = 0;\r\n            if(! lv.hasOwnProperty(\"sizeMult\")) lv.sizeMult = 1;\r\n        }\r\n\r\n        //console.log(\"render type\", this.type);\r\n    }\r\n\r\n    render(n) {\r\n        for(let lv of this.levels) {\r\n            //stroke( lv[0] );\r\n            //strokeWeight( lv[1] || 1 );\r\n            //strokeWeight( (n.depth) * lv[1]);\r\n            //console.log(n.depth, lv[1]);\r\n            //fill(192);\r\n            this.renderNode(n, lv);\r\n        }\r\n    }\r\n\r\n    renderNode(n, level) {\r\n\r\n        noFill();\r\n        noStroke();\r\n\r\n        if(level.type== \"bezier\" && level.close == false) {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=1; k<g.length-1; k++) {\r\n                        let ps = [\r\n                            g[k-1].pos[0] + (g[k].pos[0] - g[k-1].pos[0]) / 2,\r\n                            g[k-1].pos[1] + (g[k].pos[1] - g[k-1].pos[1]) / 2,\r\n                            g[k].pos[0],\r\n                            g[k].pos[1],\r\n                            g[k].pos[0] + (g[k+1].pos[0] - g[k].pos[0]) / 2,\r\n                            g[k].pos[1] + (g[k+1].pos[1] - g[k].pos[1]) / 2\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezier(ps[0], ps[1], ps[2], ps[3], ps[2], ps[3], ps[4], ps[5]);\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"bezier\" && level.close == true) {\r\n\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    fill(level.fill);\r\n                    beginShape();\r\n                    let a = [ g[0].pos[0] + (g[g.length-1].pos[0] - g[0].pos[0]) / 2, g[0].pos[1] + (g[g.length-1].pos[1] - g[0].pos[1]) / 2 ];\r\n                    vertex( a[0], a[1] );\r\n                    for(let k=0; k<g.length; k++) {\r\n                        let nxt = k==g.length-1 ? 0 : k+1;\r\n                        let ps = [ g[k].pos[0] + (g[nxt].pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (g[nxt].pos[1] - g[k].pos[1]) / 2 ];\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(g[k].pos[0], g[k].pos[1], g[k].pos[0], g[k].pos[1], ps[0], ps[1]);\r\n                    }\r\n                    //bezierVertex(g[g.length-1].pos[0], g[g.length-1].pos[1], g[g.length-1].pos[0], g[g.length-1].pos[1], a[0], a[1]);\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"polygon\") {\r\n            // for(let g of n.groups) {\r\n            //     fill(level.fill);\r\n            //     if(g.length > 1) {\r\n            //         for(let k=1; k<g.length; k++) {\r\n            //             stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n            //             strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n            //             line(g[k-1].pos[0], g[k-1].pos[1], g[k].pos[0], g[k].pos[1]);\r\n            //         }\r\n            //     }\r\n            // }\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill);\r\n                    beginShape();\r\n                    for(let k=0; k<g.length; k++) {\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                    }\r\n                    if(level.close) endShape(CLOSE);\r\n                    else endShape();\r\n                    //endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"tree\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    line(g[k].anchor.pos[0], g[k].anchor.pos[1], g[k].pos[0], g[k].pos[1]);\r\n                    //if(t == 6) console.log(k, n.pos[0], n.pos[1], n.kids[k].pos[0], n.kids[k].pos[1]);\r\n                }\r\n            }\r\n        } else if(level.type== \"circles\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                }\r\n            }\r\n        } else if(level.type== \"ripples\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    let wg = g[k].weight * level.weightMult + level.weightAdd ;\r\n                    if(wg <= 0) continue;\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( wg );\r\n                    //ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                    while(sz > 0) {\r\n                        ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                        sz -= wg*4;\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"star\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=1; k<(level.close?g.length+1:g.length); k++) {\r\n                        let nd = g[k%g.length];\r\n                        stroke(level.stroke == \"node\" ? nd.stroke : level.stroke);\r\n                        strokeWeight( nd.weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(n.pos[0], n.pos[1], n.pos[0], n.pos[1], nd.pos[0], nd.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"umbrella\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=0; k<(level.close?g.length:g.length-1); k++) {\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let hlf = [ (nxt.pos[0] - g[k].pos[0]) / 2, (nxt.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let anc = [ (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0] ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(anc[0], anc[1], anc[0], anc[1], nxt.pos[0], nxt.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"snake\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=0; k<(level.close?g.length:g.length-1); k++) {\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let hlf = [ (nxt.pos[0] - g[k].pos[0]) / 2, (nxt.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let anc = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(anc[0], anc[1], anc[2], anc[3], nxt.pos[0], nxt.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        }  else if(level.type== \"petals\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        // bezier(pts[0], pts[1], prv.pos[0], prv.pos[1], prv.pos[0], prv.pos[1], pts[2], pts[3]);\r\n                        // bezier(pts[0], pts[1], g[k].pos[0], g[k].pos[1], g[k].pos[0], g[k].pos[1], pts[2], pts[3]);\r\n                        beginShape();\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        vertex(pts[0], pts[1]);\r\n                        vertex(prv.pos[0], prv.pos[1]);\r\n                        vertex(pts[2], pts[3]);\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        endShape();\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"petal-chain\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(prv.pos[0], prv.pos[1], pts[0], pts[1], pts[0], pts[1], g[k].pos[0], g[k].pos[1]);\r\n                        bezier(g[k].pos[0], g[k].pos[1], pts[2], pts[3], pts[2], pts[3], prv.pos[0], prv.pos[1]);\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"square-chain\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        beginShape();\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        vertex(pts[0], pts[1]);\r\n                        vertex(prv.pos[0], prv.pos[1]);\r\n                        vertex(pts[2], pts[3]);\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        endShape();\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"daisy\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<(level.close?g.length:g.length-1); k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let pts = [\r\n                            g[k].pos[0] + (prv.pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (prv.pos[1] - g[k].pos[1]) / 2,\r\n                            g[k].pos[0] + (nxt.pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (nxt.pos[1] - g[k].pos[1]) / 2\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(n.pos[0], n.pos[1], pts[0], pts[1], pts[0], pts[1], g[k].pos[0], g[k].pos[1]);\r\n                        bezier(n.pos[0], n.pos[1], pts[2], pts[3], pts[2], pts[3], g[k].pos[0], g[k].pos[1]);\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"cousins\") {\r\n            if(n.depth > 1){\r\n                for(let g of n.groups) {\r\n                    for(let k=0; k<g.length; k++) {\r\n                        let siblings = n.parent.groups[n.gix];\r\n                        //console.log(siblings);\r\n                        let bro = siblings[(n.ix+1)%siblings.length];\r\n                        let cou = bro.groups[g[k].gix][g[k].ix];\r\n\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        //line(g[k].pos[0], g[k].pos[1], cou.pos[0], cou.pos[1]);\r\n                        //bezier(g[k].pos[0], g[k].pos[1], g[k].anchor.pos[0], g[k].anchor.pos[1], cou.anchor.pos[0], cou.anchor.pos[1], cou.pos[0], cou.pos[1]);\r\n                        bezier(g[k].anchor.pos[0], g[k].anchor.pos[1], g[k].pos[0], g[k].pos[1], cou.pos[0], cou.pos[1], cou.anchor.pos[0], cou.anchor.pos[1]);\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"squares\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    let cs = cos(g[k].rot), sn = sin(g[k].rot);\r\n                    let pts = [\r\n                        g[k].pos[0]+sz*cs, g[k].pos[1]+sz*sn,\r\n                        g[k].pos[0]-sz*sn, g[k].pos[1]+sz*cs,\r\n                        g[k].pos[0]-sz*cs, g[k].pos[1]-sz*sn,\r\n                        g[k].pos[0]+sz*sn, g[k].pos[1]-sz*cs\r\n\r\n\r\n                    ]\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    beginShape();\r\n                    //vertex(g[k].pos[0], g[k].pos[1]);\r\n                    vertex(pts[0], pts[1]);\r\n                    vertex(pts[2], pts[3]);\r\n                    vertex(pts[4], pts[5]);\r\n                    vertex(pts[6], pts[7]);\r\n                    vertex(pts[0], pts[1]);\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"debug\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    text(\"ix\"+g[k].ix+\" gid\"+g[k].gix, g[k].pos[0], g[k].pos[1]);\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        /*for(let k of n.kids) {\r\n            this.renderNode(k, level);\r\n        }*/\r\n        for(let g of n.groups) {\r\n            for(let k of g) {\r\n                this.renderNode(k, level);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"../bundle-min.js"}