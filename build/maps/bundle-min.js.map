{"version":3,"sources":["main.js","classes.js","generate.js","spread.js","render.js"],"names":["seed","density","capturer","render","canvas","editor","area","tickers","Set","t","go","capture","captureTime","tweenable","backCol","graphs","def0","props","renderConfig","type","levels","net","num","pos","ang","step","ease","pow","terms","min","max","dur","turn","children","noiseFlower","stroke","fill","close","mirror","size","weight","dif","noiseRad","noiseZ","noiseDetail","bounce","Math","PI","show","setup","createCanvas","parent","background","frameRate","strokeWeight","noFill","smooth","select","mouseClicked","reset","hide","console","log","fromEditor","_def","JSON","parse","value","int","random","randomSeed","noiseSeed","k","Graph","push","stringify","replacer","CCapture","format","framerate","name","verbose","display","quality","RenderCurves","key","val","floor","draw","g","root","update","moveNode","start","document","getElementById","stop","save","makeGroup","gix","dad","graph","group","i","n","Node","ix","nrm","depth","count","anchor","rot","init","j","length","groups","mousePressed","keyTyped","activeElement","gt","getTime","saveCanvas","generate","style","contrast","f","constrain","now","Date","getFullYear","toString","substring","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","[object Object]","args","this","rnd","windowWidth","windowHeight","curves","tw","isNaN","parseCurve","c","out","readTerms","base","time","ts","split","ps","parseFloat","readTerm","o","Number","term","p","prop","Object","entries","x","ti","ns","noise","cos","TWO_PI","sin","abs","pick","opts","generateWithBudget","total","angles","def","weightMult","weightAdd","dn","budget","neo","generateSimple","a1","width","height","_mirror","drawNode","line","ellipse","kids","df","lv","hasOwnProperty","sizeAdd","sizeMult","renderNode","level","noStroke","bezier","beginShape","a","vertex","nxt","bezierVertex","endShape","CLOSE","sz","wg","nd","hlf","anc","prv","pts","siblings","cou","cs","sn","text"],"mappings":"AAAA,IAEIA,KACAC,QAIAC,SACAC,OACAC,OAAQC,OAAQC,KAThBC,QAAU,IAAIC,IACdC,EAAI,EAGJC,IAAK,EACLC,SAAU,EACVC,YAAc,EAIdC,UAAY,CAAC,OAAQ,OAAQ,OAAQ,UACrCC,QAAU,UAKVC,OAAS,GAETC,KAAO,CACPC,MAAS,CACLd,OAAU,SACVe,aAAgB,CAAEC,KAAQ,SAAUC,OAAU,CAAC,CAAC,YAAa,GAAI,CAAC,uBAAwB,MAE9FC,IAAO,CACHF,KAAQ,MAAOG,IAAO,GAAIC,IAAO,CAAE,IAAK,KAAOC,IAAO,EAAGC,KAAQ,CAACC,KAAO,OAAQC,KAAQ,EAAGC,MAAS,kBAAmBC,IAAO,GAAIC,IAAO,IAAKC,IAAO,KAAMC,KAAQ,KAAK,GAAIC,SAAY,KAM7LC,YAAc,CACdjB,MAAM,CACFN,SAAS,EACTC,YAAa,IACbT,OAAQ,CAAEiB,OAAQ,CAEd,CAACD,KAAK,OAAQgB,OAAQ,YAAaC,KAAM,YAAaC,OAAM,MAGpEhB,IAAI,CACI,CACIE,IAAK,CAAC,IAAK,KACXD,IAAK,EACLH,KAAK,MACLmB,QAAO,EACPC,KAAM,GACNC,OAAQ,EACRf,KAAM,CAAEI,IAAI,GAAIY,IAAI,IAAKb,MAAM,IAAKF,KAAK,QAASK,IAAI,IAAMJ,IAAI,EAAGe,SAAS,IAAKC,OAAO,EAAGC,YAAY,EAAGC,QAAO,GACjHb,KAAK,CAAEH,IAAI,EAAGY,IAAY,EAARK,KAAKC,GAAMnB,MAAM,MACnCoB,MAAM,EACNf,SAAS,CACL,CACIX,IAAI,EACJH,KAAK,MACLoB,KAAM,GACNC,OAAQ,EACRf,KAAM,CAAEI,IAAI,GAAIY,IAAI,IAAKb,MAAM,IAAKF,KAAK,QAASK,IAAI,IAAMJ,IAAI,EAAGe,SAAS,IAAKC,OAAO,EAAGC,YAAY,EAAGC,QAAO,GACjHb,KAAM,CAAEH,IAAI,EAAGY,IAAY,EAARK,KAAKC,GAAMnB,MAAM,IAAKF,KAAK,QAASK,IAAI,IAAMJ,IAAI,EAAGe,SAAS,IAAKC,OAAO,EAAGC,YAAY,EAAGC,QAAO,GACtHG,MAAM,EAENf,SAAS,QAoCjC,SAASgB,SACL7C,OAAS8C,aAAa,KAAM,OACrBC,OAAO,aACdC,WAAWtC,SACXuC,UAAU,IACVlB,OAAO,EAAG,KACVmB,aAAa,GAEbC,SACAC,SAIAnD,OAASoD,OAAO,WAChBnD,KAAOmD,OAAO,gBACDA,OAAO,WACbC,aAAc,WAAYC,OAAM,KACxBF,OAAO,aACbC,aAAc,WAAYC,OAAM,KAEzCtD,OAAOuD,OAEPD,OAAO,GAEPE,QAAQC,IAAI,SAGhB,SAASH,MAAMI,GAEb,IAAIC,EAEAA,EADDD,EACQE,KAAKC,MAAM5D,KAAK6D,SAEhBjC,YAGXkB,WAAWtC,SACXL,EAAI,EACJT,KAAOoE,IAAIC,OAAO,SAClBC,WAAWtE,MACXuE,UAAUvE,MAEVe,OAAS,GAET,IAAIyD,EAAI,IAAIC,MAAOT,GACnBjD,OAAO2D,KAAKF,GAEZlE,KAAK6D,MAAOF,KAAKU,UAAUX,EAAMY,SAAU,IAExC,YAAaZ,EAAK/C,OAAS+C,EAAK/C,MAAMN,SACrCC,YAAcoD,EAAK/C,MAAML,aAAe,EACxCD,SAAU,EACVT,SAAW,IAAI2E,SAAU,CACrBC,OAAQ,OACRC,UAAU,GACVC,KAAK,MACLC,SAAS,EACTC,SAAS,EACTC,QAAS,MAIbxE,SAAU,EAGdR,OAAS,IAAIiF,aAAapB,GAI5B,SAASY,SAASS,EAAKC,GACnB,MAAkB,iBAAT,EAA0BxC,KAAKyC,MAAU,IAAJD,GAAS,IAChDA,EAKX,SAASE,OACP,GAAG9E,GAAI,CACH0C,WAAWtC,SACX,IAAI,IAAI2E,KAAK1E,OACT0E,EAAEC,KAAKC,SACPC,SAASH,EAAEC,MACXvF,OAAOA,OAAOsF,EAAEC,MAGjB/E,UACS,GAALF,GAAQP,SAAS2F,QAEpB3F,SAASS,QAAQmF,SAASC,eAAe,mBAEtCtF,GAAKG,cACJD,SAAU,EACVT,SAAS8F,OACT9F,SAAS+F,OACT/F,SAAW,OAInBO,KAMN,SAASyF,UAAUC,EAAKV,EAAGW,EAAKC,GAE5B,IAAIC,EAAQ,GACZ,IAAI,IAAIC,EAAE,EAAGA,EAAEd,EAAEnE,IAAKiF,IAAK,CACvB,IAAIC,EAAI,IAAIC,KAmCZ,GAlCAH,EAAM5B,KAAK8B,GACXA,EAAEE,GAAKH,EACPC,EAAEL,IAAMA,EACRK,EAAEG,IAAe,GAATlB,EAAEnE,IAAW,EAAK,EAAKmE,EAAK,IAAKc,EACzCC,EAAErD,OAASiD,EAEXI,EAAEI,MAAQR,EAAIQ,MAAM,EACpBJ,EAAEH,MAAQA,EAEVA,EAAMQ,QACNR,EAAMO,MAAQ9D,KAAKhB,IAAIuE,EAAMO,MAAOJ,EAAEI,OAGzB,SAAVnB,EAAEtE,MAAmBoF,EAAI,EACxBC,EAAEM,OAASR,EAAMC,EAAE,GAEnBC,EAAEM,OAASV,EAKfI,EAAErF,KAAOsE,EAAEtE,KACXqF,EAAEO,IAAM,EACRP,EAAExE,KAAOyD,EAAEzD,KACXwE,EAAE/E,KAAOgE,EAAEhE,KACX+E,EAAElE,OAASmD,EAAEnD,OACbkE,EAAEjE,KAAOkD,EAAElD,KACXiE,EAAEhE,OAASiD,EAAEjD,OACbgE,EAAEpE,KAAOqD,EAAErD,KACXoE,EAAErE,OAASsD,EAAEtD,OACbqE,EAAExD,OAAO,SAAUyC,IAAIA,EAAEzC,KAEzBwD,EAAEQ,OAECvB,EAAExD,SACD,IAAI,IAAIgF,EAAE,EAAGA,EAAExB,EAAExD,SAASiF,OAAQD,IAC9Bf,UAAUe,EAAGxB,EAAExD,SAASgF,GAAIT,EAAGH,GAK3CD,EAAIe,OAAOzC,KAAK4B,GAQpB,SAASc,gBAIT,SAASC,WACL,GAAIvB,SAASwB,gBAAkBxB,SAASC,eAAe,eAAvD,CAEA,GAAY,MAARV,IACA3E,IAAMA,GACNmD,QAAQC,IAAI,KAAMpD,SACf,GAAY,MAAR2E,IACP1B,OAAM,QACH,GAAY,MAAR0B,IAAa,CACpB,IAAIkC,EAAKC,UACTC,WAAW,MAAQF,EAAK,YAET,MAARlC,IACPqC,WACe,MAARrC,MACwB,SAA3BhF,OAAOsH,MAAM,WAAuBtH,OAAOuD,OAC1CvD,OAAO2C,QAGhB,OAAO,GAGX,SAAS4E,SAASpB,EAAGqB,GACnB,OAAOC,UAAUD,GAAGrB,EAAE,IAAO,GAAK,EAAG,GAGvC,SAASgB,UACP,IAAIO,EAAM,IAAIC,KACd,OAAOD,EAAIE,cAAcC,WAAWC,UAAU,EAAE,IACzCJ,EAAIK,WAAa,GAAGF,WAAWG,SAAS,EAAG,KAC3CN,EAAIO,UAAWJ,WAAWG,SAAS,EAAG,KAAO,IAC7CN,EAAIQ,WAAYL,WAAWG,SAAS,EAAG,KACvCN,EAAIS,aAAcN,WAAWG,SAAS,EAAG,KACzCN,EAAIU,aAAcP,WAAWG,SAAS,EAAG,KAUlD,MAAM5D,MACJiE,YAAYC,EAAO,IACjBC,KAAKlC,GAAK3F,OAAOmG,OACjB0B,KAAK/B,MAAQ,EACb+B,KAAKhC,MAAQ,EAEbgC,KAAKlD,KAAO,IAAIe,KAAM,CAAClF,IAAKoH,EAAKtH,IAAI,GAAGE,MACxC,IAAI,IAAIgF,EAAE,EAAGA,EAAEoC,EAAKtH,IAAI6F,OAAQX,IAC5BL,UAAUK,EAAGoC,EAAKtH,IAAIkF,GAAIqC,KAAKlD,KAAMkD,MAEzCA,KAAKlD,KAAKsB,OAEVnD,QAAQC,IAAI,QAAS8E,OAKzB,MAAMnC,KACFiC,YAAYC,EAAO,IAEfC,KAAKlC,GAAKiC,EAAKjC,IAAM,EACrBkC,KAAKzC,IAAMwC,EAAKxC,KAAO,EACvByC,KAAKjC,IAAMgC,EAAKhC,KAAO,EACvBiC,KAAKC,IAAMF,EAAKE,KAAO/F,KAAKuB,SAC5BuE,KAAKrH,IAAMoH,EAAKpH,KAAO,CAACuH,YAAc,EAAGC,aAAe,GACxDH,KAAKnH,KAAOkH,EAAKlH,MAAQ,GACzBmH,KAAK5G,KAAO2G,EAAK3G,MAAQ,EACzB4G,KAAK7B,IAAM4B,EAAK5B,KAAO,EACvB6B,KAAKtG,OAASqG,EAAKrG,SAAU,EAC7BsG,KAAKrG,KAAOoG,EAAKpG,MAAQ,GACzBqG,KAAKpG,OAASmG,EAAKnG,QAAU,EAC7BoG,KAAKhC,MAAQ+B,EAAK/B,OAAS,EAC3BgC,KAAKxG,KAAOuG,EAAKvG,MAAQ,UACzBwG,KAAKzG,OAASwG,EAAKxG,QAAU,EAC7ByG,KAAK5F,OAAO,SAAU2F,IAAOA,EAAK3F,KAGlC4F,KAAKvC,MAAQsC,EAAKtC,OAAS,KAC3BuC,KAAKzF,OAASwF,EAAKxF,QAAU,KAC7ByF,KAAK9B,OAAS6B,EAAK7B,QAAU,KAE7B8B,KAAKzB,OAASwB,EAAKxB,QAAU,GAE7ByB,KAAKI,OAAS,GAIlBN,OACI,IAAK,IAAIO,KAAMpI,UACPqI,MAAMN,KAAKK,MACXL,KAAKI,OAAOC,GAAML,KAAKO,WAAWP,KAAKK,KAK/C,IAAI,IAAIxD,KAAKmD,KAAKzB,OACd,IAAI,IAAI3C,KAAKiB,EACTjB,EAAEwC,OAKd0B,WAAWU,GACPA,EAAExH,MAAQwH,EAAExH,OAAS,KAErB,IAAIyH,EAAM,GACVA,EAAI3H,KAAO0H,EAAE1H,MAAQ,OACrB2H,EAAI1H,IAAM,QAASyH,EAAIR,KAAKU,UAAUF,EAAEzH,KAAO,EAC/C0H,EAAIxH,IAAM,QAASuH,EAAIR,KAAKU,UAAUF,EAAEvH,KAAO,EAE/CwH,EAAI5G,IAAM,QAAS2G,EAAIR,KAAKU,UAAUF,EAAE3G,KAAO,EAE/C4G,EAAItH,IAAM,QAASqH,EAAIR,KAAKU,UAAUF,EAAErH,KAAO,EAC/CsH,EAAIxG,SAAS,WAAYuG,IAAIA,EAAEvG,OAEhB,SAAZwG,EAAI3H,OACH2H,EAAI3G,SAAW,aAAc0G,EAAIR,KAAKU,UAAUF,EAAE1G,UAAY,EAC9D2G,EAAI1G,OAAS,WAAYyG,EAAIR,KAAKU,UAAUF,EAAEzG,QAAU,EACxD0G,EAAIzG,YAAc,gBAAiBwG,EAAIA,EAAExG,YAAc,EACvDA,YAAYyG,EAAIzG,YAAa,KAGjCyG,EAAIE,KAAO,EACXF,EAAIG,KAAO,EAEX,IAAIC,EAAKL,EAAExH,MAAM8H,MAAM,KACvB,IAAI,IAAIjJ,KAAKgJ,EAAI,CACb,IAAIE,EAAKlJ,EAAEiJ,MAAM,KACL,KAATC,EAAG,IAAsB,QAATA,EAAG,GAClBN,EAAIG,KAAOG,EAAGzC,OAAS,EAAI0C,WAAWD,EAAG,IAAM,EAChC,OAATA,EAAG,GACTN,EAAIG,KAAOG,EAAGzC,OAAS,EAAI0B,KAAKjC,IAAMiD,WAAWD,EAAG,IAAMf,KAAKjC,IAE/D0C,EAAIE,MAAQX,KAAKiB,SAASpJ,GAKlC,OAAO4I,EAGXX,UAAU9G,GACN,IAAKsH,MAAMtH,GAAQ,OAAOA,EAE1B,IAAIkI,EAAI,EACJL,EAAK7H,EAAM8H,MAAM,KACrB,IAAI,IAAIjJ,KAAKgJ,EACTK,GAAKC,OAAQnB,KAAKiB,SAASpJ,IAG/B,OAAOqJ,EAGXpB,SAASsB,GACL,IAAKd,MAAMc,GAAO,OAAOA,EAEzB,IAAIL,EAAKK,EAAKN,MAAM,KAChBI,EAAI,EACR,IAAI,IAAIG,KAAKN,EACKG,GAAN,MAALG,EAAgBrB,KAAKjC,IACX,OAALsD,EAAiBrB,KAAKC,IACjB,OAALoB,EAAiBrB,KAAKzF,OAAOwD,IACxB,QAALsD,EAAkBrB,KAAKzF,OAAO0F,IACzB,SAALoB,EAAmBrB,KAAKhC,MACnB,UAALqD,EAAoBrB,KAAKvC,MAAMO,MAAQgC,KAAKhC,MACvC,aAALqD,EAAuB,EAAErB,KAAKvC,MAAMO,MAAQgC,KAAKhC,MAC5C,cAALqD,EAAwB,EAAI,EAAErB,KAAKvC,MAAMO,MAAQgC,KAAKhC,MACpDmD,OAAOE,GAGrB,OAAOH,EAGXpB,SACI,IAAI,IAAKwB,EAAM5E,KAAQ6E,OAAOC,QAAQxB,KAAKI,QAAS,CAChD,IAAIqB,EAAI/E,EAAIiE,KAEZ,GAAGjE,EAAIvD,IAAM,GAAKuD,EAAIkE,KAAO,EAAG,CAC5B,IAAIc,EACWA,EAAZhF,EAAIzC,OAAa0C,MAAM9E,GAAK6E,EAAIvD,IAAI,IAAM,GAAK,EAAItB,GAAK6E,EAAIvD,IAAI,GAAMuD,EAAIvD,IAAI,EAAMtB,GAAK6E,EAAIvD,IAAI,GAC1FtB,GAAK6E,EAAIvD,IAAI,GACvBsI,GAAM,EAAI/E,EAAIvD,IAAOuI,EAAKhF,EAAIkE,KAMlC,GAFGa,EAAI,IAAGA,EAAkB,GAAd9E,MAAM8E,EAAE,IAAW/E,EAAIzC,OAAS,EAAKwH,EAAE,EAAKA,EAAI,GAE/C,SAAZ/E,EAAI5D,KAAiB,CAGpB,IAAI6I,EAAKC,MAAM,EAAIlF,EAAI5C,SAAS+H,IAAIC,OAAOL,GAAI,EAAI/E,EAAI5C,SAASiI,IAAID,OAAOL,GAAI/E,EAAI3C,QACnFiG,KAAKsB,GAAQ5E,EAAIzD,IAAM+F,SAAS2C,EAAIjF,EAAI3D,KAAQ2D,EAAI7C,SAGpDmG,KAAKsB,GAAQ5E,EAAIzD,IAAMH,KAAK4D,EAAI5D,KAAM2I,EAAG/E,EAAI3D,KAAO2D,EAAI7C,IAMhE,IAAI,IAAIgD,KAAKmD,KAAKzB,OACd,IAAI,IAAI3C,KAAKiB,EACTjB,EAAEmB,UAOlB,SAASjE,KAAKP,EAAMkJ,EAAGJ,GACnB,MAAW,UAAR9I,EACQ8I,EAAI,EAAI,EAAInH,KAAKnB,IAAI,EAAE0I,EAAGvH,KAAK8H,IAAIX,IAAMnH,KAAKnB,IAAI0I,EAAGvH,KAAK8H,IAAIX,IACtD,MAAR9I,EAGJkJ,EAAI,GAAsF,IAAzEJ,EAAI,EAAI,EAAInH,KAAKnB,IAAI,EAAI,EAAF0I,EAAKvH,KAAK8H,IAAIX,IAAMnH,KAAKnB,IAAM,EAAF0I,EAAKvH,KAAK8H,IAAIX,KACwB,IAAjG,GAAKA,EAAI,EAAI,EAAInH,KAAKnB,IAAI,GAAG,EAAU,GAAP0I,EAAE,KAASvH,KAAK8H,IAAIX,IAAMnH,KAAKnB,IAAI,EAAU,GAAP0I,EAAE,IAAQvH,KAAK8H,IAAIX,MAAc,GACrG,QAAR9I,GACPkJ,EAAIA,EAAI,GAAU,EAAJA,EAAQ,EAAY,GAAPA,EAAE,IACtBJ,EAAI,EAAI,EAAInH,KAAKnB,IAAI,EAAE0I,EAAGvH,KAAK8H,IAAIX,IAAMnH,KAAKnB,IAAI0I,EAAGvH,KAAK8H,IAAIX,KACtD,QAAR9I,EAC0B,GAA1B2B,KAAK6H,IAAIN,EAAEJ,EAAEnH,KAAKC,GAAG,GAAW,GAEhCsH,EAKf,SAASQ,QAAQC,GACb,OAAOA,EAAKvF,MAAMlB,OAAOyG,EAAK5D,UAGlC,SAASU,SAASpB,EAAGqB,GACnB,OAAOC,UAAUD,GAAGrB,EAAE,IAAO,GAAK,EAAG,GAGvC,SAASuE,qBACL,IACIC,EAAQ,EACRC,EAAS,CAAClI,GAAG,EAAGA,GAAO,EAAHA,IACpBmI,EAAM,CACNjK,MAAM,CACFd,OAAQ,CAAEiB,OAAQ,CACd,CAACD,KAAK,OAAQgB,OAAQ,UAAWgJ,WAAW,EAAGC,UAAU,GACzD,CAACjK,KAAK,SAAUgB,OAAQ,YAAaiJ,UAAU,GAC/C,CAACjK,KAAK,SAAUgB,OAAO,YAAaK,OAAO,MAInDnB,IAAI,IAEJ+E,EAAM8E,EAAI7J,IACVgK,EAAK,EAET,KAAML,EAAQM,KAAY,CACtB,IAAIhK,EAAMwB,KAAKyC,MAAoC,GAA7BzC,KAAKnB,IAAImB,KAAKuB,SAAU,IAAY,EAC1D,KAAM2G,EAAQK,EAAG/J,EAnBR,KAmBwBA,EAAM,GACnCA,IAGJ,IAAIiK,EAAM,CACNjK,IAAKA,EACLH,KAAM2B,KAAKuB,SAAW,GAAM,MAAQ,QACpC5C,KAAM,CAAEI,IAAoB,IAAhBiB,KAAKuB,SAAiB,GAAI5B,IAAI,GAC1CT,KAAM,CAAEH,IAAIkB,GAAG,EAAGN,IAAIwI,EAAOnI,KAAKyC,MAAMlB,OAAO4G,EAAO/D,WACtD5E,OAAQhB,EAAM,GAAK,EACnBkB,OAAQ,CAAEX,IAAI,EAAGY,IAAI,EAAGb,MAAM,SAC9BW,KAAM,CAAEV,IAAI,GAAIY,IAAI,GAAIb,MAAM,SAC9BK,SAAS,IAEbmE,EAAI1B,KAAK6G,GACTP,GAASK,EAAK/J,EAEXwB,KAAKuB,SAAW,KAEf+B,EAAMmF,EAAItJ,SACVoJ,GAAM/J,GAUd,OAHA4J,EAAI7J,IAAI,GAAGE,IAAM,CAACuH,YAAY,EAAGC,aAAa,GAGvCmC,EAGX,SAASM,iBACL,IAAIC,EAAKpH,OAAO,GAAKtB,GAAG,GAEpBmI,GADU9G,IAAIC,OAAO,EAAE,IACjB,CACVpD,MAAM,CACFN,SAAS,EACTC,YAAa,IACbT,OAAQ,CAAEiB,OAAQ,CAEd,CAACD,KAAK,SAAUgB,OAAQ,YAAaC,KAAM,YAAaC,OAAM,MAGtEhB,IAAI,CACI,CACIC,IAAK,GACLH,KAAK,MACLmB,QAAO,EACPC,KAAM,GACNC,OAAQ,EACRf,KAAM,EAENO,KAAK,CAAEH,IAAI,EAAGY,IAAI,EAAGb,MAAM,MAC3BoB,MAAM,EACNf,SAAS,CACL,CACIX,IAAI,GACJH,KAAK,MACLoB,KAAM,GACNC,OAAQ,EACRf,KAAM,CAAEI,IAAI,aAAcY,IAAI,GAAIb,MAAM,QAASF,KAAK,QAASK,IAAI,IAAKJ,IAAI,EAAGe,SAAS,IAAKC,OAAO,OAAQC,YAAY,EAAGC,QAAO,GAClIb,KAAM,CAAEH,IAAI,EAAGY,IAAIiI,OAAQ9I,MAAM,MACjCoB,MAAM,EAENf,SAAS,SAsC7B,OAJA4B,QAAQC,IAAI,MAAO2H,EAAI1I,GAAG,EAAE0I,EAAQ,GAAHA,GAEjCP,EAAI7J,IAAI,GAAGE,IAAM,CAACmK,MAAM,EAAGC,OAAO,GAClC9H,QAAQC,IAAI4H,MAAOC,QACZT,EAIX,SAAStF,SAASY,GACd,GAAgB,OAAbA,EAAEM,OAAiB,CAGlB,IAAI8E,GAA8B,MAAnBpF,EAAErD,OAAO2D,QAAkBN,EAAErD,OAAOb,QAAUkE,EAAErD,OAAO2D,OAAOJ,GAAG,GAAK,IAAOF,EAAElE,QAAUkE,EAAErD,OAAOuD,GAAG,GAAK,GAEzHF,EAAEO,IAAM6E,EAASpF,EAAErD,OAAO4D,IAAMP,EAAExE,KAAOwE,EAAErD,OAAO4D,IAAMP,EAAExE,KAE1DwE,EAAEjF,IAAM,CACJiF,EAAEM,OAAOvF,IAAI,GAAKiF,EAAE/E,KAAOgJ,IAAIjE,EAAEO,KACjCP,EAAEM,OAAOvF,IAAI,GAAKiF,EAAE/E,KAAOkJ,IAAInE,EAAEO,MASzC,IAAI,IAAItB,KAAKe,EAAEW,OACX,IAAI,IAAI3C,KAAKiB,EACTG,SAASpB,GAMrB,SAASqH,SAASrF,GACC,MAAZA,EAAEM,QAAgBgF,KAAKtF,EAAEM,OAAOvF,IAAI,GAAIiF,EAAEM,OAAOvF,IAAI,GAAIiF,EAAEjF,IAAI,GAAIiF,EAAEjF,IAAI,IAC5EwK,QAAQvF,EAAEjF,IAAI,GAAIiF,EAAEjF,IAAI,GAAI,GAAI,IAEhC,IAAI,IAAIiD,KAAKgC,EAAEwF,KACXH,SAASrH,GAIjB,MAAMY,aACFsD,YAAYuD,EAAK,IACb,IAAItD,EAAOsD,EAAGhL,MAAMd,QAAU,GAE9ByI,KAAKzH,KAAMwH,EAAKxH,MAAQ,OACxByH,KAAKxH,OAASuH,EAAKvH,QAAU,CAAC,CAACe,OAAO,EAAGK,OAAO,IAChD,IAAI,IAAI0J,KAAMtD,KAAKxH,OACV8K,EAAGC,eAAe,UAASD,EAAG/K,KAAOyH,KAAKzH,MAC1C+K,EAAGC,eAAe,WAAUD,EAAG7J,OAAQ,GACvC6J,EAAGC,eAAe,YAAWD,EAAG/J,OAAS,GACzC+J,EAAGC,eAAe,UAASD,EAAG9J,KAAO,WACrC8J,EAAGC,eAAe,eAAcD,EAAGd,UAAY,GAC/Cc,EAAGC,eAAe,gBAAeD,EAAGf,WAAa,GACjDe,EAAGC,eAAe,aAAYD,EAAGE,QAAU,GAC3CF,EAAGC,eAAe,cAAaD,EAAGG,SAAW,GAM1D3D,OAAOlC,GACH,IAAI,IAAI0F,KAAMtD,KAAKxH,OAMfwH,KAAK0D,WAAW9F,EAAG0F,GAI3BxD,WAAWlC,EAAG+F,GAKV,GAHAhJ,SACAiJ,WAEgB,UAAbD,EAAMpL,MAAkC,GAAfoL,EAAMlK,OAC9B,IAAI,IAAIoD,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EACV,IAAI,IAAI1C,EAAE,EAAGA,EAAEiB,EAAEyB,OAAO,EAAG1C,IAAK,CAC5B,IAAImF,EAAK,CACLlE,EAAEjB,EAAE,GAAGjD,IAAI,IAAMkE,EAAEjB,GAAGjD,IAAI,GAAKkE,EAAEjB,EAAE,GAAGjD,IAAI,IAAM,EAChDkE,EAAEjB,EAAE,GAAGjD,IAAI,IAAMkE,EAAEjB,GAAGjD,IAAI,GAAKkE,EAAEjB,EAAE,GAAGjD,IAAI,IAAM,EAChDkE,EAAEjB,GAAGjD,IAAI,GACTkE,EAAEjB,GAAGjD,IAAI,GACTkE,EAAEjB,GAAGjD,IAAI,IAAMkE,EAAEjB,EAAE,GAAGjD,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,EAC9CkE,EAAEjB,GAAGjD,IAAI,IAAMkE,EAAEjB,EAAE,GAAGjD,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAElDY,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDqB,OAAO9C,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,UAIpE,GAAgB,UAAb4C,EAAMpL,MAAkC,GAAfoL,EAAMlK,OAErC,IAAI,IAAIoD,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EAAG,CACb9E,KAAKmK,EAAMnK,MACXsK,aACA,IAAIC,EAAI,CAAElH,EAAE,GAAGlE,IAAI,IAAMkE,EAAEA,EAAEyB,OAAO,GAAG3F,IAAI,GAAKkE,EAAE,GAAGlE,IAAI,IAAM,EAAGkE,EAAE,GAAGlE,IAAI,IAAMkE,EAAEA,EAAEyB,OAAO,GAAG3F,IAAI,GAAKkE,EAAE,GAAGlE,IAAI,IAAM,GACvHqL,OAAQD,EAAE,GAAIA,EAAE,IAChB,IAAI,IAAInI,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1B,IAAIqI,EAAMrI,GAAGiB,EAAEyB,OAAO,EAAI,EAAI1C,EAAE,EAC5BmF,EAAK,CAAElE,EAAEjB,GAAGjD,IAAI,IAAMkE,EAAEoH,GAAKtL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,EAAGkE,EAAEjB,GAAGjD,IAAI,IAAMkE,EAAEoH,GAAKtL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAC1Ga,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CD,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrD0B,aAAarH,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIoI,EAAG,GAAIA,EAAG,IAG/EoD,iBAGL,GAAgB,WAAbR,EAAMpL,MAWZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EAAG,CACb9E,KAAKmK,EAAMnK,MACXsK,aACA,IAAI,IAAIlI,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IACrBrC,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDwB,OAAOnH,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,IAE9BgL,EAAMlK,MAAO0K,SAASC,OACpBD,iBAIV,GAAgB,QAAbR,EAAMpL,KACZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,IAAI,IAAI3C,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IACrBrC,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDU,KAAKrG,EAAEjB,GAAGsC,OAAOvF,IAAI,GAAIkE,EAAEjB,GAAGsC,OAAOvF,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,SAIxE,GAAgB,WAAbgL,EAAMpL,KACZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,IAAI,IAAI3C,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1B,IAAKiB,EAAEjB,GAAGxB,KAAM,SAChB,IAAIiK,EAAKxH,EAAEjB,GAAGjC,KAAOgK,EAAMF,SAAWE,EAAMH,QAC5ChK,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CD,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDW,QAAStG,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAI0L,EAAIA,QAG5C,GAAgB,WAAbV,EAAMpL,KACZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,IAAI,IAAI3C,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1B,IAAKiB,EAAEjB,GAAGxB,KAAM,SAChB,IAAIiK,EAAKxH,EAAEjB,GAAGjC,KAAOgK,EAAMF,SAAWE,EAAMH,QACxCc,EAAKzH,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,UAChD,KAAG8B,GAAM,GAKT,IAJA9K,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CD,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAc4J,GAERD,EAAK,GACPlB,QAAStG,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAI0L,EAAIA,GACvCA,GAAS,EAAHC,OAId,GAAgB,QAAbX,EAAMpL,MACb,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EAAG,CACb9E,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CsK,aACAE,OAAOnH,EAAE,GAAGlE,IAAI,GAAIkE,EAAE,GAAGlE,IAAI,IAC7B,IAAI,IAAIiD,EAAE,EAAGA,GAAG+H,EAAMlK,MAAMoD,EAAEyB,OAAO,EAAEzB,EAAEyB,QAAS1C,IAAK,CACnD,IAAI2I,EAAK1H,EAAEjB,EAAEiB,EAAEyB,QACf/E,OAAuB,QAAhBoK,EAAMpK,OAAmBgL,EAAGhL,OAASoK,EAAMpK,QAClDmB,aAAc6J,EAAG3K,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACnD0B,aAAatG,EAAEjF,IAAI,GAAIiF,EAAEjF,IAAI,GAAIiF,EAAEjF,IAAI,GAAIiF,EAAEjF,IAAI,GAAI4L,EAAG5L,IAAI,GAAI4L,EAAG5L,IAAI,IAE3EwL,iBAGL,GAAgB,YAAbR,EAAMpL,MACZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EAAG,CACb9E,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CsK,aACAE,OAAOnH,EAAE,GAAGlE,IAAI,GAAIkE,EAAE,GAAGlE,IAAI,IAC7B,IAAI,IAAIiD,EAAE,EAAGA,GAAG+H,EAAMlK,MAAMoD,EAAEyB,OAAOzB,EAAEyB,OAAO,GAAI1C,IAAK,CACnD,IAAIqI,EAAMpH,GAAGjB,EAAE,GAAKiB,EAAEyB,QAClBkG,EAAM,EAAGP,EAAItL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAAIsL,EAAItL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GACrE8L,EAAM,CAAG5H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,IAC1EjL,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrD0B,aAAaO,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIR,EAAItL,IAAI,GAAIsL,EAAItL,IAAI,IAErEwL,iBAGL,GAAgB,SAAbR,EAAMpL,MACZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EAAG,CACb9E,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CsK,aACAE,OAAOnH,EAAE,GAAGlE,IAAI,GAAIkE,EAAE,GAAGlE,IAAI,IAC7B,IAAI,IAAIiD,EAAE,EAAGA,GAAG+H,EAAMlK,MAAMoD,EAAEyB,OAAOzB,EAAEyB,OAAO,GAAI1C,IAAK,CACnD,IAAIqI,EAAMpH,GAAGjB,EAAE,GAAKiB,EAAEyB,QAClBkG,EAAM,EAAGP,EAAItL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAAIsL,EAAItL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GACrE8L,EAAM,CACL5H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAC7D3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,IAElEjL,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrD0B,aAAaO,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIR,EAAItL,IAAI,GAAIsL,EAAItL,IAAI,IAErEwL,iBAGJ,GAAgB,UAAbR,EAAMpL,MACb,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EACV,IAAI,IAAI1C,EAAG+H,EAAMlK,MAAM,EAAE,EAAImC,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1C,IAAI8I,EAAM7H,EAAK,GAAHjB,EAAOiB,EAAEyB,OAAO,EAAI1C,EAAE,GAC9B4I,EAAM,EAAGE,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAAI+L,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GACrEgM,EAAM,CACL9H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAC7D3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,IAElEjL,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDhJ,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CqK,OAAOc,EAAI,GAAIA,EAAI,GAAID,EAAI/L,IAAI,GAAI+L,EAAI/L,IAAI,GAAI+L,EAAI/L,IAAI,GAAI+L,EAAI/L,IAAI,GAAIgM,EAAI,GAAIA,EAAI,IACnFd,OAAOc,EAAI,GAAIA,EAAI,GAAI9H,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIgM,EAAI,GAAIA,EAAI,UAW/F,GAAgB,eAAbhB,EAAMpL,MACb,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EACV,IAAI,IAAI1C,EAAG+H,EAAMlK,MAAM,EAAE,EAAImC,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1C,IAAI8I,EAAM7H,EAAK,GAAHjB,EAAOiB,EAAEyB,OAAO,EAAI1C,EAAE,GAC9B4I,EAAM,EAAGE,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAAI+L,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GACrEgM,EAAM,CACL9H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAC7D3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,IAElEjL,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDhJ,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CqK,OAAOa,EAAI/L,IAAI,GAAI+L,EAAI/L,IAAI,GAAIgM,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAI9H,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,IACrFkL,OAAOhH,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIgM,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAID,EAAI/L,IAAI,GAAI+L,EAAI/L,IAAI,UAI7F,GAAgB,gBAAbgL,EAAMpL,MACb,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EACV,IAAI,IAAI1C,EAAG+H,EAAMlK,MAAM,EAAE,EAAImC,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1C,IAAI8I,EAAM7H,EAAK,GAAHjB,EAAOiB,EAAEyB,OAAO,EAAI1C,EAAE,GAC9B4I,EAAM,EAAGE,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAAI+L,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GACrEgM,EAAM,CACL9H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAC7D3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,GAAK3H,EAAEjB,GAAGjD,IAAI,GAAK6L,EAAI,GAAMA,EAAI,IAElEjL,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDhJ,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CsK,aACAE,OAAOnH,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,IAC7BqL,OAAOW,EAAI,GAAIA,EAAI,IACnBX,OAAOU,EAAI/L,IAAI,GAAI+L,EAAI/L,IAAI,IAC3BqL,OAAOW,EAAI,GAAIA,EAAI,IACnBX,OAAOnH,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,IAC7BwL,iBAIR,GAAgB,SAAbR,EAAMpL,MACb,IAAI,IAAIsE,KAAKe,EAAEW,OACX,GAAG1B,EAAEyB,OAAS,EACV,IAAI,IAAI1C,EAAG+H,EAAMlK,MAAM,EAAE,EAAImC,GAAG+H,EAAMlK,MAAMoD,EAAEyB,OAAOzB,EAAEyB,OAAO,GAAI1C,IAAK,CACnE,IAAI8I,EAAM7H,EAAK,GAAHjB,EAAOiB,EAAEyB,OAAO,EAAI1C,EAAE,GAC9BqI,EAAMpH,GAAGjB,EAAE,GAAKiB,EAAEyB,QAClBqG,EAAM,CACN9H,EAAEjB,GAAGjD,IAAI,IAAM+L,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,EAAGkE,EAAEjB,GAAGjD,IAAI,IAAM+L,EAAI/L,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,EACzFkE,EAAEjB,GAAGjD,IAAI,IAAMsL,EAAItL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,EAAGkE,EAAEjB,GAAGjD,IAAI,IAAMsL,EAAItL,IAAI,GAAKkE,EAAEjB,GAAGjD,IAAI,IAAM,GAE7FY,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDhJ,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CqK,OAAOjG,EAAEjF,IAAI,GAAIiF,EAAEjF,IAAI,GAAIgM,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAI9H,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,IACjFkL,OAAOjG,EAAEjF,IAAI,GAAIiF,EAAEjF,IAAI,GAAIgM,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAIA,EAAI,GAAI9H,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,UAK1F,GAAgB,WAAbgL,EAAMpL,MACZ,GAAGqF,EAAEI,MAAQ,EACT,IAAI,IAAInB,KAAKe,EAAEW,OACX,IAAI,IAAI3C,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1B,IAAIgJ,EAAWhH,EAAErD,OAAOgE,OAAOX,EAAEL,KAG7BsH,EADMD,GAAUhH,EAAEE,GAAG,GAAG8G,EAAStG,QACvBC,OAAO1B,EAAEjB,GAAG2B,KAAKV,EAAEjB,GAAGkC,IAEpCvE,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WAGrDqB,OAAOhH,EAAEjB,GAAGsC,OAAOvF,IAAI,GAAIkE,EAAEjB,GAAGsC,OAAOvF,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,GAAIkM,EAAIlM,IAAI,GAAIkM,EAAIlM,IAAI,GAAIkM,EAAI3G,OAAOvF,IAAI,GAAIkM,EAAI3G,OAAOvF,IAAI,UAK5I,GAAgB,WAAbgL,EAAMpL,KACZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,IAAI,IAAI3C,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IAAK,CAC1B,IAAKiB,EAAEjB,GAAGxB,KAAM,SAChB,IAAIiK,EAAKxH,EAAEjB,GAAGjC,KAAOgK,EAAMF,SAAWE,EAAMH,QACxCsB,EAAKjD,IAAIhF,EAAEjB,GAAGuC,KAAM4G,EAAKhD,IAAIlF,EAAEjB,GAAGuC,KAClCwG,EAAM,CACN9H,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGS,EAAIjI,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGU,EAClClI,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGU,EAAIlI,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGS,EAClCjI,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGS,EAAIjI,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGU,EAClClI,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGU,EAAIlI,EAAEjB,GAAGjD,IAAI,GAAG0L,EAAGS,GAItCtL,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CD,OAAuB,QAAhBoK,EAAMpK,OAAmBsD,EAAEjB,GAAGrC,OAASoK,EAAMpK,QACpDmB,aAAcmC,EAAEjB,GAAGhC,OAAS+J,EAAMpB,WAAaoB,EAAMnB,WACrDsB,aAEAE,OAAOW,EAAI,GAAIA,EAAI,IACnBX,OAAOW,EAAI,GAAIA,EAAI,IACnBX,OAAOW,EAAI,GAAIA,EAAI,IACnBX,OAAOW,EAAI,GAAIA,EAAI,IACnBX,OAAOW,EAAI,GAAIA,EAAI,IACnBR,gBAGL,GAAgB,SAAbR,EAAMpL,KACZ,IAAI,IAAIsE,KAAKe,EAAEW,OACX,IAAI,IAAI3C,EAAE,EAAGA,EAAEiB,EAAEyB,OAAQ1C,IACrBpC,KAAmB,QAAdmK,EAAMnK,KAAiBqD,EAAEjB,GAAGpC,KAAOmK,EAAMnK,MAC9CwL,KAAK,KAAKnI,EAAEjB,GAAGkC,GAAG,OAAOjB,EAAEjB,GAAG2B,IAAKV,EAAEjB,GAAGjD,IAAI,GAAIkE,EAAEjB,GAAGjD,IAAI,IAYrE,IAAI,IAAIkE,KAAKe,EAAEW,OACX,IAAI,IAAI3C,KAAKiB,EACTmD,KAAK0D,WAAW9H,EAAG+H","sourcesContent":["var tickers = new Set();\r\nvar t = 0;\r\nvar seed;\r\nvar density;\r\nvar go = true;\r\nvar capture = false;\r\nvar captureTime = 0;\r\nvar capturer;\r\nvar render;\r\nvar canvas, editor, area;\r\nvar tweenable = [\"step\", \"turn\", \"size\", \"weight\"];\r\nvar backCol = \"#FFFFFF\";\r\n\r\n// pi/2 = 1.5707\r\n// pi/3 = 1.047\r\n// pi/4 = 0.7853\r\nvar graphs = [];\r\n\r\nvar def0 = {\r\n    \"props\": {\r\n        \"render\": \"curves\",\r\n        \"renderConfig\": { \"type\": \"petals\", \"levels\": [['#FFCC0088', 8], ['rgba(255, 0, 0, 0.1)', 4]] }\r\n    },\r\n    \"net\": {\r\n        \"type\": \"fan\", \"num\": 35, \"pos\": [ 500, 400 ], \"ang\": 0, \"step\": {\"ease\":\"sine\", \"pow\": -3, \"terms\": \"noise*0.8+t*0.2\", \"min\": 30, \"max\": 480, \"dur\": 200}, \"turn\": 6.28/35, \"children\": [\r\n            //{ \"type\": \"chain\", \"num\": 3,  \"step\": 40, \"turn\": 0.5 }\r\n        ]\r\n    }\r\n};\r\n\r\nvar noiseFlower = {\r\n    props:{\r\n        capture: false,\r\n        captureTime: 300,\r\n        render: { levels: [\r\n            //{type:\"cousins\", close:true, stroke: '#FFCC0099', fill: '#33333388', weightMult:0, weightAdd:1 },\r\n            {type:\"tree\", stroke: '#000000BB', fill: '#FFFFFFFF', close:true}\r\n        ] }\r\n    },\r\n    net:[\r\n            {\r\n                pos: [540, 540],\r\n                num: 6,\r\n                type:\"fan\",\r\n                mirror:true,\r\n                size: 90,\r\n                weight: 1,\r\n                step: { min:40, dif:400, terms:\"t\", ease:\"noise\", dur:1000, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                turn:{ min:0, dif:Math.PI*2, terms:\"ix\" },\r\n                show: false,\r\n                children:[\r\n                    {\r\n                        num:9,\r\n                        type:\"fan\",\r\n                        size: 60,\r\n                        weight: 1,\r\n                        step: { min:20, dif:200, terms:\"t\", ease:\"noise\", dur:1000, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                        turn: { min:0, dif:Math.PI*2, terms:\"t\", ease:\"noise\", dur:1000, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                        show: true,\r\n                        //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                        children:[\r\n                            /*{\r\n                                num:6,\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 30,\r\n                                weight: 1,\r\n                                step:{ min:60, dif:180, terms:\"t\", ease:\"noise\", pow:random(-4, 4), dur:900, noiseRad:1, noiseZ:\"dix\", bounce:false},\r\n                                turn: { min:-2, dif:4, terms:\"t+ix\", ease:\"noise\", pow:2, dur:900, noiseRad:1, noiseZ:1, bounce:false },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            },\r\n                            {\r\n                                num:int(18/baseNum),\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 16,\r\n                                weight: 4,\r\n                                step:{ min:60, dif:0, terms:\"ix*\"+pick(1,2,3,4), ease:\"hill\", pow:random(-4, 4)},\r\n                                turn:{ min:0, dif:pick(1.78, 3.14, 6.28, 8), terms:\"ix\" },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            }*/\r\n                        ]\r\n                    }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\n\r\n\r\nfunction setup() {\r\n    canvas = createCanvas(1080, 1080);//(windowWidth, windowHeight);\r\n    canvas.parent('container');\r\n    background(backCol);\r\n    frameRate(30);\r\n    stroke(0, 128);\r\n    strokeWeight(3);\r\n    //fill(0, 32);\r\n    noFill();\r\n    smooth();\r\n\r\n\r\n\r\n    editor = select(\"#editor\");\r\n    area = select(\"#editor-area\");\r\n    let update = select(\"#update\");\r\n    update.mouseClicked( function(){ reset(true) } );\r\n    let generate = select(\"#generate\");\r\n    generate.mouseClicked( function(){ reset(false) } );\r\n\r\n    editor.hide();\r\n\r\n    reset( false );\r\n\r\n    console.log(\"setup\");\r\n}\r\n\r\nfunction reset(fromEditor) {\r\n  //let area = select(\"#editor-area\");\r\n  let _def;\r\n  if(fromEditor) {\r\n      _def = JSON.parse(area.value());\r\n  } else {\r\n      _def = noiseFlower; //generateSimple();\r\n  }\r\n  //tickers.clear();\r\n  background(backCol);\r\n  t = 0;\r\n  seed = int(random(999999));\r\n  randomSeed(seed);\r\n  noiseSeed(seed);\r\n\r\n  graphs = [];\r\n  //let _def = generate();\r\n  var k = new Graph( _def );\r\n  graphs.push(k);\r\n\r\n  area.value( JSON.stringify(_def, replacer, 2) );\r\n\r\n  if('capture' in _def.props && _def.props.capture) {\r\n      captureTime = _def.props.captureTime || 0;\r\n      capture = true;\r\n      capturer = new CCapture( {\r\n          format: 'webm',\r\n          framerate:30,\r\n          name:\"vid\",\r\n          verbose: false,\r\n          display: true,\r\n          quality: 95\r\n       } );\r\n      //capturer.start();\r\n  } else {\r\n      capture = false;\r\n  }\r\n\r\n  render = new RenderCurves(_def);\r\n\r\n}\r\n\r\nfunction replacer(key, val) {\r\n    if(typeof(val) == \"number\") return Math.floor(val*100)/100;\r\n    return val;\r\n}\r\n\r\n\r\n\r\nfunction draw() {\r\n  if(go) {\r\n      background(backCol);\r\n      for(let g of graphs) {\r\n          g.root.update();\r\n          moveNode(g.root);\r\n          render.render(g.root);\r\n      }\r\n\r\n      if(capture) {\r\n          if(t == 0) capturer.start();\r\n\r\n          capturer.capture(document.getElementById('defaultCanvas0'));\r\n\r\n          if(t == captureTime) {\r\n              capture = false;\r\n              capturer.stop();\r\n              capturer.save();\r\n              capturer = null;\r\n          }\r\n      }\r\n\r\n      t++;\r\n      //console.log(capture, t);\r\n      //if(t == 200) reset();\r\n  }\r\n}\r\n\r\nfunction makeGroup(gix, g, dad, graph) {\r\n    //console.log(\"makeGroup\", g);\r\n    let group = [];\r\n    for(let i=0; i<g.num; i++) {\r\n        let n = new Node();\r\n        group.push(n);\r\n        n.ix = i;\r\n        n.gix = gix;\r\n        n.nrm = g.num == 1 ? 0 : (1 / (g.num)) * i;\r\n        n.parent = dad;\r\n        //n.parent.kids.push(n);\r\n        n.depth = dad.depth+1;\r\n        n.graph = graph;\r\n\r\n        graph.count ++;\r\n        graph.depth = Math.max(graph.depth, n.depth);\r\n        //console.log(n);\r\n\r\n        if(g.type == \"chain\" && i > 0) {\r\n            n.anchor = group[i-1];// dad.kids[i-1];\r\n        } else {\r\n            n.anchor = dad;\r\n        }\r\n\r\n        //n.turn = isNaN(g.turn) ? parseCurve(g.turn, n) : g.turn;// n.parent.turn + g.turn * n.ix;\r\n        //n.step = isNaN(g.step) ? parseCurve(g.step, n) : g.step;\r\n        n.type = g.type;\r\n        n.rot = 0;\r\n        n.turn = g.turn;\r\n        n.step = g.step;\r\n        n.mirror = g.mirror;\r\n        n.size = g.size;\r\n        n.weight = g.weight;\r\n        n.fill = g.fill;\r\n        n.stroke = g.stroke;\r\n        n.show = 'show' in g ? g.show : true;\r\n\r\n        n.init();\r\n\r\n        if(g.children) {\r\n            for(let j=0; j<g.children.length; j++) {\r\n                makeGroup(j, g.children[j], n, graph);\r\n            }\r\n        }\r\n    }\r\n\r\n    dad.groups.push(group);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction mousePressed() {\r\n  //pen.set(mouseX, mouseY);\r\n}\r\n\r\nfunction keyTyped() {\r\n    if (document.activeElement === document.getElementById('editor-area')) return;\r\n\r\n    if (key === ' ') {\r\n        go = !go;\r\n        console.log(\"go\", go);\r\n    } else if (key === 'r') {\r\n        reset(false);\r\n    } else if (key === 's') {\r\n        let gt = getTime();\r\n        saveCanvas(\"TG-\" + gt + \".jpg\");\r\n        //saveJSON(defs, \"TG-\" + gt + \".jpg\", false);\r\n    } else if (key === 'g') {\r\n        generate();\r\n    } else if (key === 'e') {\r\n        if (editor.style(\"display\") == \"block\") editor.hide();\r\n        else editor.show();\r\n    }\r\n    // uncomment to prevent any default behavior\r\n    return false;\r\n}\r\n\r\nfunction contrast(n, f) {\r\n  return constrain(f*(n-0.5) + 0.5, 0, 1);\r\n}\r\n\r\nfunction getTime() {\r\n  let now = new Date();\r\n  return now.getFullYear().toString().substring(2,4) +\r\n        (now.getMonth() + 1).toString().padStart(2, \"0\") +\r\n        (now.getDate()).toString().padStart(2, \"0\") + \"-\" +\r\n        (now.getHours()).toString().padStart(2, \"0\") +\r\n        (now.getMinutes()).toString().padStart(2, \"0\") +\r\n        (now.getSeconds()).toString().padStart(2, \"0\");\r\n}\r\n\r\n/*function windowResized() {\r\n  resizeCanvas(windowWidth, windowHeight);\r\n  canvas.parent('container');\r\n  background(\"#FFFFFF\");\r\n}*/\r\n","/***** GRAPH *****/\r\nclass Graph {\r\n  constructor(args = {}) {\r\n    this.ix = graphs.length;\r\n    this.count = 0;\r\n    this.depth = 0;\r\n\r\n    this.root = new Node( {pos: args.net[0].pos} );\r\n    for(let i=0; i<args.net.length; i++){\r\n        makeGroup(i, args.net[i], this.root, this);\r\n    }\r\n    this.root.init();\r\n\r\n    console.log(\"graph\", this);\r\n  }\r\n}\r\n\r\n/***** NODE *****/\r\nclass Node {\r\n    constructor(args = {}) {\r\n        //properties\r\n        this.ix = args.ix || 0;\r\n        this.gix = args.gix || 0;\r\n        this.nrm = args.nrm || 0;\r\n        this.rnd = args.rnd || Math.random();\r\n        this.pos = args.pos || [windowWidth / 2, windowHeight / 2];\r\n        this.step = args.step || 30;\r\n        this.turn = args.turn || 0;\r\n        this.rot = args.rot || 0;\r\n        this.mirror = args.mirror || false;\r\n        this.size = args.size || 20;\r\n        this.weight = args.weight || 1;\r\n        this.depth = args.depth || 0;\r\n        this.fill = args.fill || \"#888888\";\r\n        this.stroke = args.stroke || 0;\r\n        this.show = 'show' in args ? args.show : true;\r\n\r\n        // Node references\r\n        this.graph = args.graph || null;\r\n        this.parent = args.parent || null;\r\n        this.anchor = args.anchor || null;\r\n        //this.kids = args.kids || [];\r\n        this.groups = args.groups || [];\r\n\r\n        this.curves = {};\r\n\r\n    }\r\n\r\n    init() {\r\n        for (let tw of tweenable) {\r\n            if (isNaN(this[tw])) {\r\n                this.curves[tw] = this.parseCurve(this[tw]);\r\n            }\r\n        }\r\n\r\n\r\n        for(let g of this.groups) {\r\n            for(let k of g) {\r\n                k.init();\r\n            }\r\n        }\r\n    }\r\n\r\n    parseCurve(c) {\r\n        c.terms = c.terms || \"ix\";\r\n\r\n        let out = {};\r\n        out.ease = c.ease || \"none\";\r\n        out.pow = 'pow' in c ? this.readTerms(c.pow) : 1;;\r\n        out.min = 'min' in c ? this.readTerms(c.min) : 0;\r\n        //out.max = c.max || 1;\r\n        out.dif = 'dif' in c ? this.readTerms(c.dif) : 0;\r\n        //out.var = c.var || c.dif / n.parent.kids.length;\r\n        out.dur = 'dur' in c ? this.readTerms(c.dur) : 0;\r\n        out.bounce = 'bounce' in c ? c.bounce : true;\r\n\r\n        if(out.ease == \"noise\") {\r\n            out.noiseRad = 'noiseRad' in c ? this.readTerms(c.noiseRad) : 2;\r\n            out.noiseZ = 'noiseZ' in c ? this.readTerms(c.noiseZ) : 1;\r\n            out.noiseDetail = 'noiseDetail' in c ? c.noiseDetail : 4;\r\n            noiseDetail(out.noiseDetail, 0.5);\r\n        }\r\n\r\n        out.base = 0;\r\n        out.time = 0;\r\n\r\n        let ts = c.terms.split('+')\r\n        for(let t of ts) {\r\n            let ps = t.split('*');\r\n            if(ps[0] == 't' || ps[0] == 'time') {\r\n                out.time = ps.length > 1 ? parseFloat(ps[1]) : 1;\r\n            } else if(ps[0] == 'tix') {\r\n                out.time = ps.length > 1 ? this.nrm * parseFloat(ps[1]) : this.nrm;\r\n            } else {\r\n                out.base += this.readTerm(t);\r\n            }\r\n        }\r\n        //console.log(\"curve\", n.graph.depth, n.depth, (n.graph.depth == 1 ? 0 : 1/n.graph.depth * n.depth) );\r\n\r\n        return out;\r\n    }\r\n\r\n    readTerms(terms) {\r\n        if(! isNaN(terms)) return terms;\r\n\r\n        let o = 0;\r\n        let ts = terms.split('+')\r\n        for(let t of ts) {\r\n            o += Number( this.readTerm(t) );\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    readTerm(term) {\r\n        if(! isNaN(term)) return term;\r\n\r\n        let ps = term.split('*');\r\n        let o = 1;\r\n        for(let p of ps) {\r\n            if(p == \"ix\") o *= this.nrm;\r\n            else if(p == \"rnd\") o *= this.rnd;\r\n            else if(p == \"dix\") o *= this.parent.nrm;\r\n            else if(p == \"drnd\") o *= this.parent.rnd;\r\n            else if(p == \"depth\") o *= this.depth;\r\n            else if(p == \"idepth\") o *= this.graph.depth - this.depth;\r\n            else if(p == \"depth-nrm\") o *= 1/this.graph.depth * this.depth;\r\n            else if(p == \"idepth-nrm\") o *= 1 - 1/this.graph.depth * this.depth;\r\n            else o *= Number(p);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    update() {\r\n        for(let [prop, val] of Object.entries(this.curves)) {\r\n            let x = val.base;\r\n            //if(val.dur > 0) x += (1 / val.dur) * (t % (val.dur+1)) * val.time;\r\n            if(val.dur > 0 && val.time > 0) {\r\n                let ti;\r\n                if(val.bounce) ti = floor(t / (val.dur+1)) % 2 == 0 ? t % (val.dur+1) : (val.dur+1) - (t % (val.dur+1));\r\n                else ti = t % (val.dur+1);\r\n                x += (1 / val.dur) * ti * val.time;\r\n                //if(ti == 20) console.log(val.bounce);\r\n            }\r\n            //if(x > 1) x %= 1;\r\n            if(x > 1) x = floor(x%2) == 1 && val.bounce ? 1 - (x%1) : x % 1;\r\n\r\n            if(val.ease == \"noise\") {\r\n\r\n                //this[prop] = val.min + noise(8 + contrast(val.noiseRad*cos(TWO_PI*x), 8 + val.noiseRad*sin(TWO_PI*x), val.noiseZ ), val.pow) * val.dif;\r\n                let ns = noise(8 + val.noiseRad*cos(TWO_PI*x), 8 + val.noiseRad*sin(TWO_PI*x), val.noiseZ );\r\n                this[prop] = val.min + contrast(ns, val.pow)  * val.dif;\r\n                //if(this.ix == 12 && this.parent.ix == 12) console.log(t, x, \"h\" );\r\n            } else {\r\n                this[prop] = val.min + ease(val.ease, x, val.pow) * val.dif;\r\n            }\r\n\r\n            //this[prop] = val.min + ease(val.ease, x, val.pow) * val.var * this.ix;\r\n        }\r\n\r\n        for(let g of this.groups) {\r\n            for(let k of g) {\r\n                k.update();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction ease(type, x, p) {\r\n    if(type == \"simple\") {\r\n        return p < 0 ? 1 - Math.pow(1-x, Math.abs(p)) : Math.pow(x, Math.abs(p));\r\n    } else if (type == \"IO\") {\r\n        //if(t < 0.5) return easeSimple(t*2, p) * 0.5;\r\n        //else return (1 - easeSimple(1-(t-0.5)*2, p)) * 0.5 + 0.5;\r\n        if(x < 0.5) return (p < 0 ? 1 - Math.pow(1-x*2, Math.abs(p)) : Math.pow(x*2, Math.abs(p))) * 0.5;\r\n        else return (1 - (p < 0 ? 1 - Math.pow(1-(1-(x-0.5)*2), Math.abs(p)) : Math.pow(1-(x-0.5)*2, Math.abs(p)))) * 0.5 + 0.5;\r\n    } else if (type == \"hill\") {\r\n        x = x < 0.5 ? x * 2 : 1 - (x-0.5)*2;\r\n        return p < 0 ? 1 - Math.pow(1-x, Math.abs(p)) : Math.pow(x, Math.abs(p));\r\n    } else if (type == \"sine\") {\r\n        return Math.sin(x*p*Math.PI*2) * 0.5 + 0.5;\r\n    } else {\r\n        return x;\r\n    }\r\n\r\n}\r\n\r\nfunction pick(...opts) {\r\n    return opts[floor(random(opts.length))];\r\n}\r\n\r\nfunction contrast(n, f) {\r\n  return constrain(f*(n-0.5) + 0.5, 0, 1);\r\n}\r\n","function generateWithBudget() {\r\n    let budget = 200;\r\n    let total = 0;\r\n    let angles = [PI/2, PI, PI*2];\r\n    let def = {\r\n        props:{\r\n            render: { levels: [\r\n                {type:\"tree\", stroke: '#999999', weightMult:0, weightAdd:1 },\r\n                {type:\"bezier\", stroke: '#00000088', weightAdd:4 },\r\n                {type:\"bezier\", stroke:'#FFFFFF88', weight:0} ]\r\n            }\r\n            //\"renderConfig\": { \"type\": \"tree\", \"levels\": [[0, 8], ['#FFFFFF', 4]] }\r\n        },\r\n        net:[]\r\n    };\r\n    let dad = def.net;\r\n    let dn = 1;\r\n\r\n    while(total < budget*0.8) {\r\n        let num = Math.floor( Math.pow(Math.random(), 2) * 10 ) + 2;\r\n        while(total + dn*num > budget && num > 1) {\r\n            num --;\r\n            //console.log(num, dn, total);\r\n        }\r\n        let neo = {\r\n            num: num,\r\n            type: Math.random() < 0.6 ? \"fan\" : \"chain\",\r\n            step: { min:Math.random() * 120 + 30, dif:0 },\r\n            turn: { min:PI/2, dif:angles[Math.floor(random(angles.length))] },\r\n            mirror: num % 2 == 0,\r\n            weight: { min:2, dif:2, terms:\"depth\" },\r\n            size: { min:10, dif:40, terms:\"depth\" },\r\n            children:[]\r\n        };\r\n        dad.push(neo);\r\n        total += dn * num;\r\n\r\n        if(Math.random() < 0.7) {\r\n            //console.log(\"child\", num, dn, total);\r\n            dad = neo.children;\r\n            dn *= num;\r\n\r\n        } else {\r\n            //console.log(\"sibling\", num, dn, total);\r\n        }\r\n    }\r\n\r\n    def.net[0].pos = [windowWidth/2, windowHeight/2];\r\n\r\n    //console.log(total, def);\r\n    return def;\r\n}\r\n\r\nfunction generateSimple() {\r\n    let a1 = random(0.1, PI/2);//PI/2;\r\n    let baseNum = int(random(4,8));\r\n    let def = {\r\n    props:{\r\n        capture: false,\r\n        captureTime: 300,\r\n        render: { levels: [\r\n            //{type:\"cousins\", close:true, stroke: '#FFCC0099', fill: '#33333388', weightMult:0, weightAdd:1 },\r\n            {type:\"bezier\", stroke: '#000000BB', fill: '#FFFFFFFF', close:true}\r\n        ] }\r\n    },\r\n    net:[\r\n            {\r\n                num: 60,\r\n                type:\"fan\",\r\n                mirror:true,\r\n                size: 90,\r\n                weight: 1,\r\n                step: 2,\r\n                //turn:{ min:PI/2+a1, dif:-a1*4, terms:\"ix\" },\r\n                turn:{ min:0, dif:0, terms:\"ix\" },\r\n                show: false,\r\n                children:[\r\n                    {\r\n                        num:36,\r\n                        type:\"fan\",\r\n                        size: 60,\r\n                        weight: 1,\r\n                        step: { min:\"40+dix*120\", dif:40, terms:\"t+dix\", ease:\"noise\", dur:300, pow:1, noiseRad:1.5, noiseZ:\"ix*4\", noiseDetail:4, bounce:false },\r\n                        turn: { min:0, dif:TWO_PI, terms:\"ix\" },\r\n                        show: true,\r\n                        //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                        children:[\r\n                            /*{\r\n                                num:6,\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 30,\r\n                                weight: 1,\r\n                                step:{ min:60, dif:180, terms:\"t\", ease:\"noise\", pow:random(-4, 4), dur:900, noiseRad:1, noiseZ:\"dix\", bounce:false},\r\n                                turn: { min:-2, dif:4, terms:\"t+ix\", ease:\"noise\", pow:2, dur:900, noiseRad:1, noiseZ:1, bounce:false },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            },\r\n                            {\r\n                                num:int(18/baseNum),\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 16,\r\n                                weight: 4,\r\n                                step:{ min:60, dif:0, terms:\"ix*\"+pick(1,2,3,4), ease:\"hill\", pow:random(-4, 4)},\r\n                                turn:{ min:0, dif:pick(1.78, 3.14, 6.28, 8), terms:\"ix\" },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            }*/\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n\r\n    console.log(\"GEN\", a1, PI/2+a1, -a1*4 );\r\n\r\n    def.net[0].pos = [width/2, height/2];\r\n    console.log(width, height);\r\n    return def;\r\n\r\n}\r\n","function moveNode(n) {\r\n    if(n.anchor !== null) {\r\n        //let trn = n.parent.rot + n.turn;\r\n\r\n        let _mirror = (n.parent.anchor != null && n.parent.mirror && n.parent.anchor.ix%2 == 0) ^ ( n.mirror && n.parent.ix%2 == 0);\r\n\r\n        n.rot = _mirror? n.parent.rot - n.turn : n.parent.rot + n.turn;\r\n\r\n        n.pos = [\r\n            n.anchor.pos[0] + n.step * cos(n.rot),\r\n            n.anchor.pos[1] + n.step * sin(n.rot)\r\n        ]\r\n\r\n        //if(t == 5) console.log(n.depth, n.ix, n.step, n.rot);\r\n    }\r\n\r\n    /*for(let k of n.kids) {\r\n        moveNode(k);\r\n    }*/\r\n    for(let g of n.groups) {\r\n        for(let k of g) {\r\n            moveNode(k);\r\n        }\r\n    }\r\n}\r\n","\r\nfunction drawNode(n) {\r\n    if(n.anchor != null) line(n.anchor.pos[0], n.anchor.pos[1], n.pos[0], n.pos[1]);\r\n    ellipse(n.pos[0], n.pos[1], 10, 10);\r\n\r\n    for(let k of n.kids) {\r\n        drawNode(k);\r\n    }\r\n}\r\n\r\nclass RenderCurves {\r\n    constructor(df = {}) {\r\n        let args = df.props.render || {};\r\n\r\n        this.type= args.type || \"tree\";\r\n        this.levels = args.levels || [{stroke:0, weight:1}];\r\n        for(let lv of this.levels) {\r\n            if(! lv.hasOwnProperty(\"type\")) lv.type = this.type;\r\n            if(! lv.hasOwnProperty(\"close\")) lv.close = false;\r\n            if(! lv.hasOwnProperty(\"stroke\")) lv.stroke = 0;\r\n            if(! lv.hasOwnProperty(\"fill\")) lv.fill = \"#888888\";\r\n            if(! lv.hasOwnProperty(\"weightAdd\")) lv.weightAdd = 0;\r\n            if(! lv.hasOwnProperty(\"weightMult\")) lv.weightMult = 1;\r\n            if(! lv.hasOwnProperty(\"sizeAdd\")) lv.sizeAdd = 0;\r\n            if(! lv.hasOwnProperty(\"sizeMult\")) lv.sizeMult = 1;\r\n        }\r\n\r\n        //console.log(\"render type\", this.type);\r\n    }\r\n\r\n    render(n) {\r\n        for(let lv of this.levels) {\r\n            //stroke( lv[0] );\r\n            //strokeWeight( lv[1] || 1 );\r\n            //strokeWeight( (n.depth) * lv[1]);\r\n            //console.log(n.depth, lv[1]);\r\n            //fill(192);\r\n            this.renderNode(n, lv);\r\n        }\r\n    }\r\n\r\n    renderNode(n, level) {\r\n\r\n        noFill();\r\n        noStroke();\r\n\r\n        if(level.type== \"bezier\" && level.close == false) {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=1; k<g.length-1; k++) {\r\n                        let ps = [\r\n                            g[k-1].pos[0] + (g[k].pos[0] - g[k-1].pos[0]) / 2,\r\n                            g[k-1].pos[1] + (g[k].pos[1] - g[k-1].pos[1]) / 2,\r\n                            g[k].pos[0],\r\n                            g[k].pos[1],\r\n                            g[k].pos[0] + (g[k+1].pos[0] - g[k].pos[0]) / 2,\r\n                            g[k].pos[1] + (g[k+1].pos[1] - g[k].pos[1]) / 2\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezier(ps[0], ps[1], ps[2], ps[3], ps[2], ps[3], ps[4], ps[5]);\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"bezier\" && level.close == true) {\r\n\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    fill(level.fill);\r\n                    beginShape();\r\n                    let a = [ g[0].pos[0] + (g[g.length-1].pos[0] - g[0].pos[0]) / 2, g[0].pos[1] + (g[g.length-1].pos[1] - g[0].pos[1]) / 2 ];\r\n                    vertex( a[0], a[1] );\r\n                    for(let k=0; k<g.length; k++) {\r\n                        let nxt = k==g.length-1 ? 0 : k+1;\r\n                        let ps = [ g[k].pos[0] + (g[nxt].pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (g[nxt].pos[1] - g[k].pos[1]) / 2 ];\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(g[k].pos[0], g[k].pos[1], g[k].pos[0], g[k].pos[1], ps[0], ps[1]);\r\n                    }\r\n                    //bezierVertex(g[g.length-1].pos[0], g[g.length-1].pos[1], g[g.length-1].pos[0], g[g.length-1].pos[1], a[0], a[1]);\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"polygon\") {\r\n            // for(let g of n.groups) {\r\n            //     fill(level.fill);\r\n            //     if(g.length > 1) {\r\n            //         for(let k=1; k<g.length; k++) {\r\n            //             stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n            //             strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n            //             line(g[k-1].pos[0], g[k-1].pos[1], g[k].pos[0], g[k].pos[1]);\r\n            //         }\r\n            //     }\r\n            // }\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill);\r\n                    beginShape();\r\n                    for(let k=0; k<g.length; k++) {\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                    }\r\n                    if(level.close) endShape(CLOSE);\r\n                    else endShape();\r\n                    //endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"tree\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    line(g[k].anchor.pos[0], g[k].anchor.pos[1], g[k].pos[0], g[k].pos[1]);\r\n                    //if(t == 6) console.log(k, n.pos[0], n.pos[1], n.kids[k].pos[0], n.kids[k].pos[1]);\r\n                }\r\n            }\r\n        } else if(level.type== \"circles\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                }\r\n            }\r\n        } else if(level.type== \"ripples\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    let wg = g[k].weight * level.weightMult + level.weightAdd ;\r\n                    if(wg <= 0) continue;\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( wg );\r\n                    //ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                    while(sz > 0) {\r\n                        ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                        sz -= wg*4;\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"star\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=1; k<(level.close?g.length+1:g.length); k++) {\r\n                        let nd = g[k%g.length];\r\n                        stroke(level.stroke == \"node\" ? nd.stroke : level.stroke);\r\n                        strokeWeight( nd.weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(n.pos[0], n.pos[1], n.pos[0], n.pos[1], nd.pos[0], nd.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"umbrella\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=0; k<(level.close?g.length:g.length-1); k++) {\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let hlf = [ (nxt.pos[0] - g[k].pos[0]) / 2, (nxt.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let anc = [ (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0] ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(anc[0], anc[1], anc[0], anc[1], nxt.pos[0], nxt.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"snake\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=0; k<(level.close?g.length:g.length-1); k++) {\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let hlf = [ (nxt.pos[0] - g[k].pos[0]) / 2, (nxt.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let anc = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(anc[0], anc[1], anc[2], anc[3], nxt.pos[0], nxt.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        }  else if(level.type== \"petals\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(pts[0], pts[1], prv.pos[0], prv.pos[1], prv.pos[0], prv.pos[1], pts[2], pts[3]);\r\n                        bezier(pts[0], pts[1], g[k].pos[0], g[k].pos[1], g[k].pos[0], g[k].pos[1], pts[2], pts[3]);\r\n                        /*beginShape();\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        vertex(pts[0], pts[1]);\r\n                        vertex(prv.pos[0], prv.pos[1]);\r\n                        vertex(pts[2], pts[3]);\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        endShape();*/\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"petal-chain\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(prv.pos[0], prv.pos[1], pts[0], pts[1], pts[0], pts[1], g[k].pos[0], g[k].pos[1]);\r\n                        bezier(g[k].pos[0], g[k].pos[1], pts[2], pts[3], pts[2], pts[3], prv.pos[0], prv.pos[1]);\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"square-chain\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        beginShape();\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        vertex(pts[0], pts[1]);\r\n                        vertex(prv.pos[0], prv.pos[1]);\r\n                        vertex(pts[2], pts[3]);\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        endShape();\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"daisy\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<(level.close?g.length:g.length-1); k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let pts = [\r\n                            g[k].pos[0] + (prv.pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (prv.pos[1] - g[k].pos[1]) / 2,\r\n                            g[k].pos[0] + (nxt.pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (nxt.pos[1] - g[k].pos[1]) / 2\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(n.pos[0], n.pos[1], pts[0], pts[1], pts[0], pts[1], g[k].pos[0], g[k].pos[1]);\r\n                        bezier(n.pos[0], n.pos[1], pts[2], pts[3], pts[2], pts[3], g[k].pos[0], g[k].pos[1]);\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"cousins\") {\r\n            if(n.depth > 1){\r\n                for(let g of n.groups) {\r\n                    for(let k=0; k<g.length; k++) {\r\n                        let siblings = n.parent.groups[n.gix];\r\n                        //console.log(siblings);\r\n                        let bro = siblings[(n.ix+1)%siblings.length];\r\n                        let cou = bro.groups[g[k].gix][g[k].ix];\r\n\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        //line(g[k].pos[0], g[k].pos[1], cou.pos[0], cou.pos[1]);\r\n                        //bezier(g[k].pos[0], g[k].pos[1], g[k].anchor.pos[0], g[k].anchor.pos[1], cou.anchor.pos[0], cou.anchor.pos[1], cou.pos[0], cou.pos[1]);\r\n                        bezier(g[k].anchor.pos[0], g[k].anchor.pos[1], g[k].pos[0], g[k].pos[1], cou.pos[0], cou.pos[1], cou.anchor.pos[0], cou.anchor.pos[1]);\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"squares\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    let cs = cos(g[k].rot), sn = sin(g[k].rot);\r\n                    let pts = [\r\n                        g[k].pos[0]+sz*cs, g[k].pos[1]+sz*sn,\r\n                        g[k].pos[0]-sz*sn, g[k].pos[1]+sz*cs,\r\n                        g[k].pos[0]-sz*cs, g[k].pos[1]-sz*sn,\r\n                        g[k].pos[0]+sz*sn, g[k].pos[1]-sz*cs\r\n\r\n\r\n                    ]\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    beginShape();\r\n                    //vertex(g[k].pos[0], g[k].pos[1]);\r\n                    vertex(pts[0], pts[1]);\r\n                    vertex(pts[2], pts[3]);\r\n                    vertex(pts[4], pts[5]);\r\n                    vertex(pts[6], pts[7]);\r\n                    vertex(pts[0], pts[1]);\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"debug\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    text(\"ix\"+g[k].ix+\" gid\"+g[k].gix, g[k].pos[0], g[k].pos[1]);\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        /*for(let k of n.kids) {\r\n            this.renderNode(k, level);\r\n        }*/\r\n        for(let g of n.groups) {\r\n            for(let k of g) {\r\n                this.renderNode(k, level);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"../bundle-min.js"}