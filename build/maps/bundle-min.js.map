{"version":3,"sources":["main.js","classes.js","generate.js","spread.js","render.js"],"names":["seed","density","capturer","render","canvas","editor","area","tickers","Set","t","go","capture","captureTime","tweenable","backCol","graphs","def0","props","renderConfig","type","levels","net","num","pos","ang","step","ease","pow","terms","min","max","dur","turn","children","noiseFlower","stroke","fill","close","mirror","size","weight","dif","noiseRad","noiseZ","noiseDetail","bounce","fan","Math","PI","rot","show","shape","setup","createCanvas","parent","background","frameRate","strokeWeight","noFill","smooth","select","mouseClicked","reset","hide","console","log","fromEditor","_def","JSON","parse","value","int","random","randomSeed","noiseSeed","k","Graph","push","stringify","replacer","CCapture","format","framerate","name","verbose","display","quality","RenderCurves","key","val","floor","draw","g","root","update","moveNode","start","document","getElementById","stop","save","makeGroup","gix","dad","graph","group","i","n","Node","ix","nrm","depth","count","anchor","init","j","length","groups","mousePressed","keyTyped","activeElement","gt","getTime","saveCanvas","generate","style","contrast","f","constrain","now","Date","getFullYear","toString","substring","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","[object Object]","args","this","rnd","windowWidth","windowHeight","TWO_PI","_trn","curves","tw","isNaN","parseCurve","c","out","readTerms","base","time","ts","split","ps","parseFloat","readTerm","o","Number","term","p","prop","Object","entries","x","ti","ns","noise","cos","sin","abs","pick","opts","generateWithBudget","total","angles","def","weightMult","weightAdd","dn","budget","neo","generateSimple","a1","width","height","_mirror","a","drawNode","line","ellipse","kids","df","lv","hasOwnProperty","sizeAdd","sizeMult","renderNode","level","noStroke","bezier","beginShape","vertex","nxt","bezierVertex","endShape","CLOSE","sz","wg","nd","hlf","anc","prv","pts","siblings","cou","cs","sn","text"],"mappings":"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","sourcesContent":["var tickers = new Set();\r\nvar t = 0;\r\nvar seed;\r\nvar density;\r\nvar go = true;\r\nvar capture = false;\r\nvar captureTime = 0;\r\nvar capturer;\r\nvar render;\r\nvar canvas, editor, area;\r\nvar tweenable = [\"step\", \"turn\", \"rot\", \"fan\", \"size\", \"weight\"];\r\nvar backCol = \"#FFFFFF\";\r\n\r\n// pi/2 = 1.5707\r\n// pi/3 = 1.047\r\n// pi/4 = 0.7853\r\nvar graphs = [];\r\n\r\nvar def0 = {\r\n    \"props\": {\r\n        \"render\": \"curves\",\r\n        \"renderConfig\": { \"type\": \"petals\", \"levels\": [['#FFCC0088', 8], ['rgba(255, 0, 0, 0.1)', 4]] }\r\n    },\r\n    \"net\": {\r\n        \"type\": \"fan\", \"num\": 35, \"pos\": [ 500, 400 ], \"ang\": 0, \"step\": {\"ease\":\"sine\", \"pow\": -3, \"terms\": \"noise*0.8+t*0.2\", \"min\": 30, \"max\": 480, \"dur\": 200}, \"turn\": 6.28/35, \"children\": [\r\n            //{ \"type\": \"chain\", \"num\": 3,  \"step\": 40, \"turn\": 0.5 }\r\n        ]\r\n    }\r\n};\r\n\r\nvar noiseFlower = {\r\n    props:{\r\n        capture: false,\r\n        captureTime: 300,\r\n        render: { levels: [\r\n            //{type:\"cousins\", close:true, stroke: '#FFCC0099', fill: '#33333388', weightMult:0, weightAdd:1 },\r\n            {type:\"tree\", stroke: '#000000BB', fill: '#FFFFFFFF', close:true}\r\n        ] }\r\n    },\r\n    net:[\r\n            {\r\n                pos: [540, 540],\r\n                num: 6,\r\n                type:\"fan\",\r\n                mirror:true,\r\n                size: 90,\r\n                weight: 1,\r\n                step: { min:200, dif:40, terms:\"t\", ease:\"IO\", dur:1000, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                turn:{ min:0, dif:1, terms:\"ix\" },\r\n                fan: Math.PI*2,\r\n                rot: 1,\r\n                show: false,\r\n                children:[\r\n                    {\r\n                        num:9,\r\n                        type:\"fan\",\r\n                        mirror: true,\r\n                        size: 60,\r\n                        weight: 1,\r\n                        step: { min:20, dif:200, terms:\"t\", ease:\"noise\", dur:1000, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                        //turn: { min:-Math.PI/2, dif:Math.PI, terms:\"tix\", ease:\"hill\", dur:500, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                        turn: { min:0, dif:1, terms:\"ix\", ease:\"none\", dur:500, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                        fan: Math.PI,\r\n                        show: true,\r\n                        //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                        children:[\r\n                            /*{\r\n                                num:6,\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 30,\r\n                                weight: 1,\r\n                                step:{ min:60, dif:180, terms:\"t\", ease:\"noise\", pow:random(-4, 4), dur:900, noiseRad:1, noiseZ:\"dix\", bounce:false},\r\n                                turn: { min:-2, dif:4, terms:\"t+ix\", ease:\"noise\", pow:2, dur:900, noiseRad:1, noiseZ:1, bounce:false },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            },\r\n                            {\r\n                                num:int(18/baseNum),\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 16,\r\n                                weight: 4,\r\n                                step:{ min:60, dif:0, terms:\"ix*\"+pick(1,2,3,4), ease:\"hill\", pow:random(-4, 4)},\r\n                                turn:{ min:0, dif:pick(1.78, 3.14, 6.28, 8), terms:\"ix\" },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            }*/\r\n                        ]\r\n                    }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\n\r\nvar shape = {\r\n    props:{\r\n        capture: false,\r\n        captureTime: 300,\r\n        render: { levels: [\r\n            //{type:\"cousins\", close:true, stroke: '#FFCC0099', fill: '#33333388', weightMult:0, weightAdd:1 },\r\n            {type:\"tree\", stroke: '#000000BB', fill: '#FFFFFFFF', close:true},\r\n            {type:\"bezier\", stroke: '#000000BB', fill: '#FFFFFFFF', close:true}\r\n        ] }\r\n    },\r\n    net:[\r\n            {\r\n                pos: [540, 540],\r\n                num: 180,\r\n                type:\"fan\",\r\n                mirror:true,\r\n                size: 90,\r\n                weight: 1,\r\n                step: { min:200, dif:40, terms:\"ix\", ease:\"noise\", dur:1000, pow:1, noiseRad:1.5, noiseZ:1, noiseDetail:4, bounce:false },\r\n                show: true,\r\n                children:[\r\n                ]\r\n            }\r\n    ]\r\n};\r\n\r\n\r\n\r\nfunction setup() {\r\n    canvas = createCanvas(1080, 1080);//(windowWidth, windowHeight);\r\n    canvas.parent('container');\r\n    background(backCol);\r\n    frameRate(30);\r\n    stroke(0, 128);\r\n    strokeWeight(3);\r\n    //fill(0, 32);\r\n    noFill();\r\n    smooth();\r\n\r\n\r\n\r\n    editor = select(\"#editor\");\r\n    area = select(\"#editor-area\");\r\n    let update = select(\"#update\");\r\n    update.mouseClicked( function(){ reset(true) } );\r\n    let generate = select(\"#generate\");\r\n    generate.mouseClicked( function(){ reset(false) } );\r\n\r\n    editor.hide();\r\n\r\n    reset( false );\r\n\r\n    console.log(\"setup\");\r\n}\r\n\r\nfunction reset(fromEditor) {\r\n  //let area = select(\"#editor-area\");\r\n  let _def;\r\n  if(fromEditor) {\r\n      _def = JSON.parse(area.value());\r\n  } else {\r\n      _def = noiseFlower; //generateSimple();\r\n  }\r\n  //tickers.clear();\r\n  background(backCol);\r\n  t = 0;\r\n  seed = int(random(999999));\r\n  randomSeed(seed);\r\n  noiseSeed(seed);\r\n\r\n  graphs = [];\r\n  //let _def = generate();\r\n  var k = new Graph( _def );\r\n  graphs.push(k);\r\n\r\n  area.value( JSON.stringify(_def, replacer, 2) );\r\n\r\n  if('capture' in _def.props && _def.props.capture) {\r\n      captureTime = _def.props.captureTime || 0;\r\n      capture = true;\r\n      capturer = new CCapture( {\r\n          format: 'webm',\r\n          framerate:30,\r\n          name:\"vid\",\r\n          verbose: false,\r\n          display: true,\r\n          quality: 95\r\n       } );\r\n      //capturer.start();\r\n  } else {\r\n      capture = false;\r\n  }\r\n\r\n  render = new RenderCurves(_def);\r\n\r\n}\r\n\r\nfunction replacer(key, val) {\r\n    if(typeof(val) == \"number\") return Math.floor(val*100)/100;\r\n    return val;\r\n}\r\n\r\n\r\n\r\nfunction draw() {\r\n  if(go) {\r\n      background(backCol);\r\n      for(let g of graphs) {\r\n          g.root.update();\r\n          moveNode(g.root);\r\n          render.render(g.root);\r\n      }\r\n\r\n      if(capture) {\r\n          if(t == 0) capturer.start();\r\n\r\n          capturer.capture(document.getElementById('defaultCanvas0'));\r\n\r\n          if(t == captureTime) {\r\n              capture = false;\r\n              capturer.stop();\r\n              capturer.save();\r\n              capturer = null;\r\n          }\r\n      }\r\n\r\n      t++;\r\n      //console.log(capture, t);\r\n      //if(t == 200) reset();\r\n  }\r\n}\r\n\r\nfunction makeGroup(gix, g, dad, graph) {\r\n    //console.log(\"makeGroup\", g);\r\n    let group = [];\r\n    for(let i=0; i<g.num; i++) {\r\n        let n = new Node();\r\n        group.push(n);\r\n        n.ix = i;\r\n        n.gix = gix;\r\n        n.nrm = g.num == 1 ? 0 : (1 / (g.num)) * i;\r\n        n.parent = dad;\r\n        //n.parent.kids.push(n);\r\n        n.depth = dad.depth+1;\r\n        n.graph = graph;\r\n\r\n        graph.count ++;\r\n        graph.depth = Math.max(graph.depth, n.depth);\r\n        //console.log(n);\r\n\r\n        if(g.type == \"chain\" && i > 0) {\r\n            n.anchor = group[i-1];// dad.kids[i-1];\r\n        } else {\r\n            n.anchor = dad;\r\n        }\r\n\r\n        //n.turn = isNaN(g.turn) ? parseCurve(g.turn, n) : g.turn;// n.parent.turn + g.turn * n.ix;\r\n        //n.step = isNaN(g.step) ? parseCurve(g.step, n) : g.step;\r\n        n.type = \"type\" in g ? g.type : 'fan';\r\n        // n.turn = \"turn\" in g ? g.turn : 0;\r\n        // n.rot = \"rot\" in g ? g.rot : 0;\r\n        // n.fan = \"fan\" in g ? g.fan : TWO_PI;\r\n        // n.step = \"step\" in g ? g.step : 30;\r\n        if('turn' in g) n.turn = g.turn;\r\n        if('rot' in g) n.rot = g.rot;\r\n        if('fan' in g) n.fan = g.fan;\r\n        if('step' in g) n.step = g.step;\r\n        n.mirror = g.mirror;\r\n        n.size = g.size;\r\n        n.weight = g.weight;\r\n        n.fill = g.fill;\r\n        n.stroke = g.stroke;\r\n        n.show = 'show' in g ? g.show : true;\r\n\r\n        console.log(\"makeGroup init\", n);\r\n\r\n        n.init();\r\n\r\n        if(g.children) {\r\n            for(let j=0; j<g.children.length; j++) {\r\n                makeGroup(j, g.children[j], n, graph);\r\n            }\r\n        }\r\n    }\r\n\r\n    dad.groups.push(group);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction mousePressed() {\r\n  //pen.set(mouseX, mouseY);\r\n}\r\n\r\nfunction keyTyped() {\r\n    if (document.activeElement === document.getElementById('editor-area')) return;\r\n\r\n    if (key === ' ') {\r\n        go = !go;\r\n        console.log(\"go\", go);\r\n    } else if (key === 'r') {\r\n        reset(false);\r\n    } else if (key === 's') {\r\n        let gt = getTime();\r\n        saveCanvas(\"TG-\" + gt + \".jpg\");\r\n        //saveJSON(defs, \"TG-\" + gt + \".jpg\", false);\r\n    } else if (key === 'g') {\r\n        generate();\r\n    } else if (key === 'e') {\r\n        if (editor.style(\"display\") == \"block\") editor.hide();\r\n        else editor.show();\r\n    }\r\n    // uncomment to prevent any default behavior\r\n    return false;\r\n}\r\n\r\nfunction contrast(n, f) {\r\n  return constrain(f*(n-0.5) + 0.5, 0, 1);\r\n}\r\n\r\nfunction getTime() {\r\n  let now = new Date();\r\n  return now.getFullYear().toString().substring(2,4) +\r\n        (now.getMonth() + 1).toString().padStart(2, \"0\") +\r\n        (now.getDate()).toString().padStart(2, \"0\") + \"-\" +\r\n        (now.getHours()).toString().padStart(2, \"0\") +\r\n        (now.getMinutes()).toString().padStart(2, \"0\") +\r\n        (now.getSeconds()).toString().padStart(2, \"0\");\r\n}\r\n\r\n/*function windowResized() {\r\n  resizeCanvas(windowWidth, windowHeight);\r\n  canvas.parent('container');\r\n  background(\"#FFFFFF\");\r\n}*/\r\n","/***** GRAPH *****/\r\nclass Graph {\r\n  constructor(args = {}) {\r\n    this.ix = graphs.length;\r\n    this.count = 0;\r\n    this.depth = 0;\r\n\r\n    this.root = new Node();\r\n    this.root.pos = args.net[0].pos;\r\n    for(let i=0; i<args.net.length; i++){\r\n        makeGroup(i, args.net[i], this.root, this);\r\n    }\r\n    console.log(\"Graph init\", this.root);\r\n    this.root.init();\r\n\r\n    console.log(\"graph\", this);\r\n  }\r\n}\r\n\r\n/***** NODE *****/\r\nclass Node {\r\n    constructor(args = {}) {\r\n\r\n        //properties\r\n        /*this.ix = args.ix || 0;\r\n        this.gix = args.gix || 0;\r\n        this.nrm = args.nrm || 0;\r\n        this.rnd = args.rnd || Math.random();\r\n        this.pos = args.pos || [windowWidth / 2, windowHeight / 2];\r\n        this.step = args.step || 30;\r\n        this.turn = args.turn || 0;\r\n        this.rot = args.rot == undefined ? 0 : args.rot; //'rot' in args ? args.rot : 0; //args.rot || 0;\r\n        this.fan = 'fan' in args ? args.fan : 0; //args.fan || TWO_PI;\r\n        this.mirror = args.mirror || false;\r\n        this.size = args.size || 20;\r\n        this.weight = args.weight || 1;\r\n        this.depth = args.depth || 0;\r\n        this.fill = args.fill || \"#888888\";\r\n        this.stroke = args.stroke || 0;\r\n        this.show = 'show' in args ? args.show : true;\r\n\r\n        // Node references\r\n        this.graph = args.graph || null;\r\n        this.parent = args.parent || null;\r\n        this.anchor = args.anchor || null;\r\n        //this.kids = args.kids || [];\r\n        this.groups = args.groups || [];*/\r\n\r\n        this.ix = 0;\r\n        this.gix = 0;\r\n        this.nrm = 0;\r\n        this.rnd = Math.random();\r\n        this.pos = [windowWidth / 2, windowHeight / 2];\r\n        this.step = 30;\r\n        this.turn = { min:0, dif:1 };\r\n        this.rot = 0;\r\n        this.fan = TWO_PI;\r\n        this.mirror = false;\r\n        this.size = 20;\r\n        this.weight = 1;\r\n        this.depth = 0;\r\n        this.fill = \"#888888\";\r\n        this.stroke = 0;\r\n        this.show = true;\r\n\r\n        // Node references\r\n        this.graph = null;\r\n        this.parent = null;\r\n        this.anchor = null;\r\n        this.groups = [];\r\n\r\n        this._trn = 0;\r\n        this.curves = {};\r\n\r\n        //console.log(\"args:\", args, \"this:\", this);\r\n\r\n    }\r\n\r\n    init() {\r\n        for (let tw of tweenable) {\r\n            if (isNaN(this[tw])) {\r\n                console.log(tw, this[tw]);\r\n                this.curves[tw] = this.parseCurve(this[tw]);\r\n            }\r\n        }\r\n\r\n\r\n        for(let g of this.groups) {\r\n            for(let k of g) {\r\n                console.log(\"init init\", k);\r\n                k.init();\r\n            }\r\n        }\r\n    }\r\n\r\n    parseCurve(c) {\r\n        c.terms = c.terms || \"ix\";\r\n\r\n        let out = {};\r\n        out.ease = c.ease || \"none\";\r\n        out.pow = 'pow' in c ? this.readTerms(c.pow) : 1;;\r\n        out.min = 'min' in c ? this.readTerms(c.min) : 0;\r\n        //out.max = c.max || 1;\r\n        out.dif = 'dif' in c ? this.readTerms(c.dif) : 1;\r\n        //out.var = c.var || c.dif / n.parent.kids.length;\r\n        out.dur = 'dur' in c ? this.readTerms(c.dur) : 0;\r\n        out.bounce = 'bounce' in c ? c.bounce : true;\r\n\r\n        if(out.ease == \"noise\") {\r\n            out.noiseRad = 'noiseRad' in c ? this.readTerms(c.noiseRad) : 2;\r\n            out.noiseZ = 'noiseZ' in c ? this.readTerms(c.noiseZ) : 1;\r\n            out.noiseDetail = 'noiseDetail' in c ? c.noiseDetail : 4;\r\n            noiseDetail(out.noiseDetail, 0.5);\r\n        }\r\n\r\n        out.base = 0;\r\n        out.time = 0;\r\n\r\n        let ts = c.terms.split('+')\r\n        for(let t of ts) {\r\n            let ps = t.split('*');\r\n            if(ps[0] == 't' || ps[0] == 'time') {\r\n                out.time = ps.length > 1 ? parseFloat(ps[1]) : 1;\r\n            } else if(ps[0] == 'tix') {\r\n                out.time = ps.length > 1 ? this.nrm * parseFloat(ps[1]) : this.nrm;\r\n            } else {\r\n                out.base += this.readTerm(t);\r\n            }\r\n        }\r\n        //console.log(\"curve\", n.graph.depth, n.depth, (n.graph.depth == 1 ? 0 : 1/n.graph.depth * n.depth) );\r\n\r\n        return out;\r\n    }\r\n\r\n    readTerms(terms) {\r\n        if(! isNaN(terms)) return terms;\r\n\r\n        let o = 0;\r\n        let ts = terms.split('+')\r\n        for(let t of ts) {\r\n            o += Number( this.readTerm(t) );\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    readTerm(term) {\r\n        if(! isNaN(term)) return term;\r\n\r\n        let ps = term.split('*');\r\n        let o = 1;\r\n        for(let p of ps) {\r\n            if(p == \"ix\") o *= this.nrm;\r\n            else if(p == \"rnd\") o *= this.rnd;\r\n            else if(p == \"dix\") o *= this.parent.nrm;\r\n            else if(p == \"drnd\") o *= this.parent.rnd;\r\n            else if(p == \"depth\") o *= this.depth;\r\n            else if(p == \"idepth\") o *= this.graph.depth - this.depth;\r\n            else if(p == \"depth-nrm\") o *= 1/this.graph.depth * this.depth;\r\n            else if(p == \"idepth-nrm\") o *= 1 - 1/this.graph.depth * this.depth;\r\n            else o *= Number(p);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    update() {\r\n        for(let [prop, val] of Object.entries(this.curves)) {\r\n            let x = val.base;\r\n            //if(val.dur > 0) x += (1 / val.dur) * (t % (val.dur+1)) * val.time;\r\n            if(val.dur > 0 && val.time > 0) {\r\n                let ti;\r\n                if(val.bounce) ti = floor(t / (val.dur+1)) % 2 == 0 ? t % (val.dur+1) : (val.dur+1) - (t % (val.dur+1));\r\n                else ti = t % (val.dur+1);\r\n                x += (1 / val.dur) * ti * val.time;\r\n                //if(ti == 20) console.log(val.bounce);\r\n            }\r\n            //if(x > 1) x %= 1;\r\n            if(x > 1) x = floor(x%2) == 1 && val.bounce ? 1 - (x%1) : x % 1;\r\n\r\n            if(val.ease == \"noise\") {\r\n\r\n                //this[prop] = val.min + noise(8 + contrast(val.noiseRad*cos(TWO_PI*x), 8 + val.noiseRad*sin(TWO_PI*x), val.noiseZ ), val.pow) * val.dif;\r\n                let ns = noise(8 + val.noiseRad*cos(TWO_PI*x), 8 + val.noiseRad*sin(TWO_PI*x), val.noiseZ );\r\n                this[prop] = val.min + contrast(ns, val.pow)  * val.dif;\r\n                //if(this.ix == 12 && this.parent.ix == 12) console.log(t, x, \"h\" );\r\n            } else {\r\n                this[prop] = val.min + ease(val.ease, x, val.pow) * val.dif;\r\n            }\r\n\r\n            //this[prop] = val.min + ease(val.ease, x, val.pow) * val.var * this.ix;\r\n        }\r\n\r\n        for(let g of this.groups) {\r\n            for(let k of g) {\r\n                k.update();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction ease(type, x, p) {\r\n    if(type == \"simple\") {\r\n        return p < 0 ? 1 - Math.pow(1-x, Math.abs(p)) : Math.pow(x, Math.abs(p));\r\n    } else if (type == \"IO\") {\r\n        //if(t < 0.5) return easeSimple(t*2, p) * 0.5;\r\n        //else return (1 - easeSimple(1-(t-0.5)*2, p)) * 0.5 + 0.5;\r\n        if(x < 0.5) return (p < 0 ? 1 - Math.pow(1-x*2, Math.abs(p)) : Math.pow(x*2, Math.abs(p))) * 0.5;\r\n        else return (1 - (p < 0 ? 1 - Math.pow(1-(1-(x-0.5)*2), Math.abs(p)) : Math.pow(1-(x-0.5)*2, Math.abs(p)))) * 0.5 + 0.5;\r\n    } else if (type == \"hill\") {\r\n        x = x < 0.5 ? x * 2 : 1 - (x-0.5)*2;\r\n        return p < 0 ? 1 - Math.pow(1-x, Math.abs(p)) : Math.pow(x, Math.abs(p));\r\n    } else if (type == \"sine\") {\r\n        return Math.sin(x*p*Math.PI*2) * 0.5 + 0.5;\r\n    } else {\r\n        return x;\r\n    }\r\n\r\n}\r\n\r\nfunction pick(...opts) {\r\n    return opts[floor(random(opts.length))];\r\n}\r\n\r\nfunction contrast(n, f) {\r\n  return constrain(f*(n-0.5) + 0.5, 0, 1);\r\n}\r\n","function generateWithBudget() {\r\n    let budget = 200;\r\n    let total = 0;\r\n    let angles = [PI/2, PI, PI*2];\r\n    let def = {\r\n        props:{\r\n            render: { levels: [\r\n                {type:\"tree\", stroke: '#999999', weightMult:0, weightAdd:1 },\r\n                {type:\"bezier\", stroke: '#00000088', weightAdd:4 },\r\n                {type:\"bezier\", stroke:'#FFFFFF88', weight:0} ]\r\n            }\r\n            //\"renderConfig\": { \"type\": \"tree\", \"levels\": [[0, 8], ['#FFFFFF', 4]] }\r\n        },\r\n        net:[]\r\n    };\r\n    let dad = def.net;\r\n    let dn = 1;\r\n\r\n    while(total < budget*0.8) {\r\n        let num = Math.floor( Math.pow(Math.random(), 2) * 10 ) + 2;\r\n        while(total + dn*num > budget && num > 1) {\r\n            num --;\r\n            //console.log(num, dn, total);\r\n        }\r\n        let neo = {\r\n            num: num,\r\n            type: Math.random() < 0.6 ? \"fan\" : \"chain\",\r\n            step: { min:Math.random() * 120 + 30, dif:0 },\r\n            turn: { min:PI/2, dif:angles[Math.floor(random(angles.length))] },\r\n            mirror: num % 2 == 0,\r\n            weight: { min:2, dif:2, terms:\"depth\" },\r\n            size: { min:10, dif:40, terms:\"depth\" },\r\n            children:[]\r\n        };\r\n        dad.push(neo);\r\n        total += dn * num;\r\n\r\n        if(Math.random() < 0.7) {\r\n            //console.log(\"child\", num, dn, total);\r\n            dad = neo.children;\r\n            dn *= num;\r\n\r\n        } else {\r\n            //console.log(\"sibling\", num, dn, total);\r\n        }\r\n    }\r\n\r\n    def.net[0].pos = [windowWidth/2, windowHeight/2];\r\n\r\n    //console.log(total, def);\r\n    return def;\r\n}\r\n\r\nfunction generateSimple() {\r\n    let a1 = random(0.1, PI/2);//PI/2;\r\n    let baseNum = int(random(4,8));\r\n    let def = {\r\n    props:{\r\n        capture: false,\r\n        captureTime: 300,\r\n        render: { levels: [\r\n            //{type:\"cousins\", close:true, stroke: '#FFCC0099', fill: '#33333388', weightMult:0, weightAdd:1 },\r\n            {type:\"bezier\", stroke: '#000000BB', fill: '#FFFFFFFF', close:true}\r\n        ] }\r\n    },\r\n    net:[\r\n            {\r\n                num: 60,\r\n                type:\"fan\",\r\n                mirror:true,\r\n                size: 90,\r\n                weight: 1,\r\n                step: 2,\r\n                //turn:{ min:PI/2+a1, dif:-a1*4, terms:\"ix\" },\r\n                turn:{ min:0, dif:0, terms:\"ix\" },\r\n                show: false,\r\n                children:[\r\n                    {\r\n                        num:36,\r\n                        type:\"fan\",\r\n                        size: 60,\r\n                        weight: 1,\r\n                        step: { min:\"40+dix*120\", dif:40, terms:\"t+dix\", ease:\"noise\", dur:300, pow:1, noiseRad:1.5, noiseZ:\"ix*4\", noiseDetail:4, bounce:false },\r\n                        turn: { min:0, dif:TWO_PI, terms:\"ix\" },\r\n                        show: true,\r\n                        //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                        children:[\r\n                            /*{\r\n                                num:6,\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 30,\r\n                                weight: 1,\r\n                                step:{ min:60, dif:180, terms:\"t\", ease:\"noise\", pow:random(-4, 4), dur:900, noiseRad:1, noiseZ:\"dix\", bounce:false},\r\n                                turn: { min:-2, dif:4, terms:\"t+ix\", ease:\"noise\", pow:2, dur:900, noiseRad:1, noiseZ:1, bounce:false },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            },\r\n                            {\r\n                                num:int(18/baseNum),\r\n                                type:\"fan\",\r\n                                mirror:false,\r\n                                size: 16,\r\n                                weight: 4,\r\n                                step:{ min:60, dif:0, terms:\"ix*\"+pick(1,2,3,4), ease:\"hill\", pow:random(-4, 4)},\r\n                                turn:{ min:0, dif:pick(1.78, 3.14, 6.28, 8), terms:\"ix\" },\r\n                                //turn:{ min:0, dif:TWO_PI, terms:\"ix\" },\r\n                                children:[\r\n\r\n                                ]\r\n                            }*/\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    };\r\n\r\n    console.log(\"GEN\", a1, PI/2+a1, -a1*4 );\r\n\r\n    def.net[0].pos = [width/2, height/2];\r\n    console.log(width, height);\r\n    return def;\r\n\r\n}\r\n","function moveNode(n) {\r\n    if(n.anchor !== null) {\r\n        //let trn = n.parent.rot + n.turn;\r\n\r\n        let _mirror = (n.parent.anchor != null && n.parent.mirror && n.parent.anchor.ix%2 == 0) ^ ( n.mirror && n.parent.ix%2 == 0);\r\n\r\n        //n.rot = _mirror? n.parent.rot - n.turn : n.parent.rot + n.turn;\r\n        let a = n.parent.rot + n.fan * (n.turn - 0.5);\r\n        //n._trn = n.parent._trn + n.parent.rot + (_mirror ? n.fan * (n.turn - 0.5) : n.fan * (1 - (n.turn - 0.5)));\r\n        n._trn = _mirror? n.parent._trn - a : n.parent._trn + a;\r\n\r\n        n.pos = [\r\n            n.anchor.pos[0] + n.step * cos(n._trn),\r\n            n.anchor.pos[1] + n.step * sin(n._trn)\r\n        ]\r\n\r\n        //if(t == 5) console.log(n.depth, n.ix, n.step, n.rot);\r\n    }\r\n\r\n    /*for(let k of n.kids) {\r\n        moveNode(k);\r\n    }*/\r\n    for(let g of n.groups) {\r\n        for(let k of g) {\r\n            moveNode(k);\r\n        }\r\n    }\r\n}\r\n","\r\nfunction drawNode(n) {\r\n    if(n.anchor != null) line(n.anchor.pos[0], n.anchor.pos[1], n.pos[0], n.pos[1]);\r\n    ellipse(n.pos[0], n.pos[1], 10, 10);\r\n\r\n    for(let k of n.kids) {\r\n        drawNode(k);\r\n    }\r\n}\r\n\r\nclass RenderCurves {\r\n    constructor(df = {}) {\r\n        let args = df.props.render || {};\r\n\r\n        this.type= args.type || \"tree\";\r\n        this.levels = args.levels || [{stroke:0, weight:1}];\r\n        for(let lv of this.levels) {\r\n            if(! lv.hasOwnProperty(\"type\")) lv.type = this.type;\r\n            if(! lv.hasOwnProperty(\"close\")) lv.close = false;\r\n            if(! lv.hasOwnProperty(\"stroke\")) lv.stroke = 0;\r\n            if(! lv.hasOwnProperty(\"fill\")) lv.fill = \"#888888\";\r\n            if(! lv.hasOwnProperty(\"weightAdd\")) lv.weightAdd = 0;\r\n            if(! lv.hasOwnProperty(\"weightMult\")) lv.weightMult = 1;\r\n            if(! lv.hasOwnProperty(\"sizeAdd\")) lv.sizeAdd = 0;\r\n            if(! lv.hasOwnProperty(\"sizeMult\")) lv.sizeMult = 1;\r\n        }\r\n\r\n        //console.log(\"render type\", this.type);\r\n    }\r\n\r\n    render(n) {\r\n        for(let lv of this.levels) {\r\n            //stroke( lv[0] );\r\n            //strokeWeight( lv[1] || 1 );\r\n            //strokeWeight( (n.depth) * lv[1]);\r\n            //console.log(n.depth, lv[1]);\r\n            //fill(192);\r\n            this.renderNode(n, lv);\r\n        }\r\n    }\r\n\r\n    renderNode(n, level) {\r\n\r\n        noFill();\r\n        noStroke();\r\n\r\n        if(level.type== \"bezier\" && level.close == false) {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=1; k<g.length-1; k++) {\r\n                        let ps = [\r\n                            g[k-1].pos[0] + (g[k].pos[0] - g[k-1].pos[0]) / 2,\r\n                            g[k-1].pos[1] + (g[k].pos[1] - g[k-1].pos[1]) / 2,\r\n                            g[k].pos[0],\r\n                            g[k].pos[1],\r\n                            g[k].pos[0] + (g[k+1].pos[0] - g[k].pos[0]) / 2,\r\n                            g[k].pos[1] + (g[k+1].pos[1] - g[k].pos[1]) / 2\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezier(ps[0], ps[1], ps[2], ps[3], ps[2], ps[3], ps[4], ps[5]);\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"bezier\" && level.close == true) {\r\n\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    fill(level.fill);\r\n                    beginShape();\r\n                    let a = [ g[0].pos[0] + (g[g.length-1].pos[0] - g[0].pos[0]) / 2, g[0].pos[1] + (g[g.length-1].pos[1] - g[0].pos[1]) / 2 ];\r\n                    vertex( a[0], a[1] );\r\n                    for(let k=0; k<g.length; k++) {\r\n                        let nxt = k==g.length-1 ? 0 : k+1;\r\n                        let ps = [ g[k].pos[0] + (g[nxt].pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (g[nxt].pos[1] - g[k].pos[1]) / 2 ];\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(g[k].pos[0], g[k].pos[1], g[k].pos[0], g[k].pos[1], ps[0], ps[1]);\r\n                    }\r\n                    //bezierVertex(g[g.length-1].pos[0], g[g.length-1].pos[1], g[g.length-1].pos[0], g[g.length-1].pos[1], a[0], a[1]);\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"polygon\") {\r\n            // for(let g of n.groups) {\r\n            //     fill(level.fill);\r\n            //     if(g.length > 1) {\r\n            //         for(let k=1; k<g.length; k++) {\r\n            //             stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n            //             strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n            //             line(g[k-1].pos[0], g[k-1].pos[1], g[k].pos[0], g[k].pos[1]);\r\n            //         }\r\n            //     }\r\n            // }\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill);\r\n                    beginShape();\r\n                    for(let k=0; k<g.length; k++) {\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                    }\r\n                    if(level.close) endShape(CLOSE);\r\n                    else endShape();\r\n                    //endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"tree\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    line(g[k].anchor.pos[0], g[k].anchor.pos[1], g[k].pos[0], g[k].pos[1]);\r\n                    //if(t == 6) console.log(k, n.pos[0], n.pos[1], n.kids[k].pos[0], n.kids[k].pos[1]);\r\n                }\r\n            }\r\n        } else if(level.type== \"circles\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                }\r\n            }\r\n        } else if(level.type== \"ripples\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    let wg = g[k].weight * level.weightMult + level.weightAdd ;\r\n                    if(wg <= 0) continue;\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( wg );\r\n                    //ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                    while(sz > 0) {\r\n                        ellipse( g[k].pos[0], g[k].pos[1], sz, sz);\r\n                        sz -= wg*4;\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"star\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=1; k<(level.close?g.length+1:g.length); k++) {\r\n                        let nd = g[k%g.length];\r\n                        stroke(level.stroke == \"node\" ? nd.stroke : level.stroke);\r\n                        strokeWeight( nd.weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(n.pos[0], n.pos[1], n.pos[0], n.pos[1], nd.pos[0], nd.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"umbrella\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=0; k<(level.close?g.length:g.length-1); k++) {\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let hlf = [ (nxt.pos[0] - g[k].pos[0]) / 2, (nxt.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let anc = [ (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0] ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(anc[0], anc[1], anc[0], anc[1], nxt.pos[0], nxt.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"snake\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 1) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    beginShape();\r\n                    vertex(g[0].pos[0], g[0].pos[1]);\r\n                    for(let k=0; k<(level.close?g.length:g.length-1); k++) {\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let hlf = [ (nxt.pos[0] - g[k].pos[0]) / 2, (nxt.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let anc = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        bezierVertex(anc[0], anc[1], anc[2], anc[3], nxt.pos[0], nxt.pos[1]);\r\n                    }\r\n                    endShape();\r\n                }\r\n            }\r\n        }  else if(level.type== \"petals\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(pts[0], pts[1], prv.pos[0], prv.pos[1], prv.pos[0], prv.pos[1], pts[2], pts[3]);\r\n                        bezier(pts[0], pts[1], g[k].pos[0], g[k].pos[1], g[k].pos[0], g[k].pos[1], pts[2], pts[3]);\r\n                        /*beginShape();\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        vertex(pts[0], pts[1]);\r\n                        vertex(prv.pos[0], prv.pos[1]);\r\n                        vertex(pts[2], pts[3]);\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        endShape();*/\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"petal-chain\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(prv.pos[0], prv.pos[1], pts[0], pts[1], pts[0], pts[1], g[k].pos[0], g[k].pos[1]);\r\n                        bezier(g[k].pos[0], g[k].pos[1], pts[2], pts[3], pts[2], pts[3], prv.pos[0], prv.pos[1]);\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"square-chain\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<g.length; k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let hlf = [ (prv.pos[0] - g[k].pos[0]) / 2, (prv.pos[1] - g[k].pos[1]) / 2 ];\r\n                        let pts = [\r\n                            (g[k].pos[0] + hlf[0]) - hlf[1], (g[k].pos[1] + hlf[1]) + hlf[0],\r\n                            (g[k].pos[0] + hlf[0]) + hlf[1], (g[k].pos[1] + hlf[1]) - hlf[0]\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        beginShape();\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        vertex(pts[0], pts[1]);\r\n                        vertex(prv.pos[0], prv.pos[1]);\r\n                        vertex(pts[2], pts[3]);\r\n                        vertex(g[k].pos[0], g[k].pos[1]);\r\n                        endShape();\r\n                    }\r\n                }\r\n            }\r\n        }  else if(level.type== \"daisy\") {\r\n            for(let g of n.groups) {\r\n                if(g.length > 2) {\r\n                    for(let k=(level.close?0:1); k<(level.close?g.length:g.length-1); k++) {\r\n                        let prv = g[k==0 ? g.length-1 : k-1];\r\n                        let nxt = g[(k+1) % g.length];\r\n                        let pts = [\r\n                            g[k].pos[0] + (prv.pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (prv.pos[1] - g[k].pos[1]) / 2,\r\n                            g[k].pos[0] + (nxt.pos[0] - g[k].pos[0]) / 2, g[k].pos[1] + (nxt.pos[1] - g[k].pos[1]) / 2\r\n                        ];\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                        bezier(n.pos[0], n.pos[1], pts[0], pts[1], pts[0], pts[1], g[k].pos[0], g[k].pos[1]);\r\n                        bezier(n.pos[0], n.pos[1], pts[2], pts[3], pts[2], pts[3], g[k].pos[0], g[k].pos[1]);\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"cousins\") {\r\n            if(n.depth > 1){\r\n                for(let g of n.groups) {\r\n                    for(let k=0; k<g.length; k++) {\r\n                        let siblings = n.parent.groups[n.gix];\r\n                        //console.log(siblings);\r\n                        let bro = siblings[(n.ix+1)%siblings.length];\r\n                        let cou = bro.groups[g[k].gix][g[k].ix];\r\n\r\n                        stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                        strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                        //line(g[k].pos[0], g[k].pos[1], cou.pos[0], cou.pos[1]);\r\n                        //bezier(g[k].pos[0], g[k].pos[1], g[k].anchor.pos[0], g[k].anchor.pos[1], cou.anchor.pos[0], cou.anchor.pos[1], cou.pos[0], cou.pos[1]);\r\n                        bezier(g[k].anchor.pos[0], g[k].anchor.pos[1], g[k].pos[0], g[k].pos[1], cou.pos[0], cou.pos[1], cou.anchor.pos[0], cou.anchor.pos[1]);\r\n\r\n                    }\r\n                }\r\n            }\r\n        } else if(level.type== \"squares\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    if(! g[k].show) continue;\r\n                    let sz = g[k].size * level.sizeMult + level.sizeAdd;\r\n                    let cs = cos(g[k].rot), sn = sin(g[k].rot);\r\n                    let pts = [\r\n                        g[k].pos[0]+sz*cs, g[k].pos[1]+sz*sn,\r\n                        g[k].pos[0]-sz*sn, g[k].pos[1]+sz*cs,\r\n                        g[k].pos[0]-sz*cs, g[k].pos[1]-sz*sn,\r\n                        g[k].pos[0]+sz*sn, g[k].pos[1]-sz*cs\r\n\r\n\r\n                    ]\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    stroke(level.stroke == \"node\" ? g[k].stroke : level.stroke);\r\n                    strokeWeight( g[k].weight * level.weightMult + level.weightAdd );\r\n                    beginShape();\r\n                    //vertex(g[k].pos[0], g[k].pos[1]);\r\n                    vertex(pts[0], pts[1]);\r\n                    vertex(pts[2], pts[3]);\r\n                    vertex(pts[4], pts[5]);\r\n                    vertex(pts[6], pts[7]);\r\n                    vertex(pts[0], pts[1]);\r\n                    endShape();\r\n                }\r\n            }\r\n        } else if(level.type== \"debug\") {\r\n            for(let g of n.groups) {\r\n                for(let k=0; k<g.length; k++) {\r\n                    fill(level.fill == \"node\" ? g[k].fill : level.fill);\r\n                    text(\"ix\"+g[k].ix+\" gid\"+g[k].gix, g[k].pos[0], g[k].pos[1]);\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        /*for(let k of n.kids) {\r\n            this.renderNode(k, level);\r\n        }*/\r\n        for(let g of n.groups) {\r\n            for(let k of g) {\r\n                this.renderNode(k, level);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"file":"../bundle-min.js"}